{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as shape from 'd3-shape';\nimport PropTypes from 'prop-types';\nimport Chart from \"./chart/chart\";\n\nclass AreaChart extends Chart {\n  createPaths(_ref) {\n    var {\n      data,\n      x,\n      y\n    } = _ref;\n    var {\n      curve,\n      start\n    } = this.props;\n    var area = shape.area().x(d => x(d.x)).y0(y(start)).y1(d => y(d.y)).defined(item => typeof item.y === 'number').curve(curve)(data);\n    var line = shape.line().x(d => x(d.x)).y(d => y(d.y)).defined(item => typeof item.y === 'number').curve(curve)(data);\n    return {\n      path: area,\n      area,\n      line\n    };\n  }\n\n}\n\nAreaChart.propTypes = _objectSpread({}, Chart.propTypes, {\n  start: PropTypes.number\n});\nAreaChart.defaultProps = _objectSpread({}, Chart.defaultProps, {\n  start: 0\n});\nexport default AreaChart;","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-svg-charts/src/area-chart.js"],"names":["shape","PropTypes","Chart","AreaChart","createPaths","data","x","y","curve","start","props","area","d","y0","y1","defined","item","line","path","propTypes","number","defaultProps"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP;;AAEA,MAAMC,SAAN,SAAwBD,KAAxB,CAA8B;AAC1BE,EAAAA,WAAW,OAAiB;AAAA,QAAhB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,CAAR;AAAWC,MAAAA;AAAX,KAAgB;AACxB,QAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmB,KAAKC,KAA9B;AAEA,QAAMC,IAAI,GAAGX,KAAK,CACbW,IADQ,GAERL,CAFQ,CAELM,CAAD,IAAON,CAAC,CAACM,CAAC,CAACN,CAAH,CAFF,EAGRO,EAHQ,CAGLN,CAAC,CAACE,KAAD,CAHI,EAIRK,EAJQ,CAIJF,CAAD,IAAOL,CAAC,CAACK,CAAC,CAACL,CAAH,CAJH,EAKRQ,OALQ,CAKCC,IAAD,IAAU,OAAOA,IAAI,CAACT,CAAZ,KAAkB,QAL5B,EAMRC,KANQ,CAMFA,KANE,EAMKH,IANL,CAAb;AAQA,QAAMY,IAAI,GAAGjB,KAAK,CACbiB,IADQ,GAERX,CAFQ,CAELM,CAAD,IAAON,CAAC,CAACM,CAAC,CAACN,CAAH,CAFF,EAGRC,CAHQ,CAGLK,CAAD,IAAOL,CAAC,CAACK,CAAC,CAACL,CAAH,CAHF,EAIRQ,OAJQ,CAICC,IAAD,IAAU,OAAOA,IAAI,CAACT,CAAZ,KAAkB,QAJ5B,EAKRC,KALQ,CAKFA,KALE,EAKKH,IALL,CAAb;AAOA,WAAO;AACHa,MAAAA,IAAI,EAAEP,IADH;AAEHA,MAAAA,IAFG;AAGHM,MAAAA;AAHG,KAAP;AAKH;;AAxByB;;AA2B9Bd,SAAS,CAACgB,SAAV,qBACOjB,KAAK,CAACiB,SADb;AAEIV,EAAAA,KAAK,EAAER,SAAS,CAACmB;AAFrB;AAKAjB,SAAS,CAACkB,YAAV,qBACOnB,KAAK,CAACmB,YADb;AAEIZ,EAAAA,KAAK,EAAE;AAFX;AAKA,eAAeN,SAAf","sourcesContent":["import * as shape from 'd3-shape'\nimport PropTypes from 'prop-types'\nimport Chart from './chart/chart'\n\nclass AreaChart extends Chart {\n    createPaths({ data, x, y }) {\n        const { curve, start } = this.props\n\n        const area = shape\n            .area()\n            .x((d) => x(d.x))\n            .y0(y(start))\n            .y1((d) => y(d.y))\n            .defined((item) => typeof item.y === 'number')\n            .curve(curve)(data)\n\n        const line = shape\n            .line()\n            .x((d) => x(d.x))\n            .y((d) => y(d.y))\n            .defined((item) => typeof item.y === 'number')\n            .curve(curve)(data)\n\n        return {\n            path: area,\n            area,\n            line,\n        }\n    }\n}\n\nAreaChart.propTypes = {\n    ...Chart.propTypes,\n    start: PropTypes.number,\n}\n\nAreaChart.defaultProps = {\n    ...Chart.defaultProps,\n    start: 0,\n}\n\nexport default AreaChart\n"]},"metadata":{},"sourceType":"module"}