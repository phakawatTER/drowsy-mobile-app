{"ast":null,"code":"var _jsxFileName = \"/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-navigation-drawer/dist/views/DrawerNavigatorItems.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ThemeContext } from '@react-navigation/core';\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from \"./TouchableItem\";\n\nclass DrawerNavigatorItems extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this._getActiveTintColor = () => {\n      var {\n        activeTintColor\n      } = this.props;\n\n      if (!activeTintColor) {\n        return;\n      } else if (typeof activeTintColor === 'string') {\n        return activeTintColor;\n      }\n\n      return activeTintColor[this.context];\n    };\n\n    this._getInactiveTintColor = () => {\n      var {\n        inactiveTintColor\n      } = this.props;\n\n      if (!inactiveTintColor) {\n        return;\n      } else if (typeof inactiveTintColor === 'string') {\n        return inactiveTintColor;\n      }\n\n      return inactiveTintColor[this.context];\n    };\n\n    this._getActiveBackgroundColor = () => {\n      var {\n        activeBackgroundColor\n      } = this.props;\n\n      if (!activeBackgroundColor) {\n        return;\n      } else if (typeof activeBackgroundColor === 'string') {\n        return activeBackgroundColor;\n      }\n\n      return activeBackgroundColor[this.context];\n    };\n\n    this._getInactiveBackgroundColor = () => {\n      var {\n        inactiveBackgroundColor\n      } = this.props;\n\n      if (!inactiveBackgroundColor) {\n        return;\n      } else if (typeof inactiveBackgroundColor === 'string') {\n        return inactiveBackgroundColor;\n      }\n\n      return inactiveBackgroundColor[this.context];\n    };\n  }\n\n  render() {\n    var {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition\n    } = this.props;\n\n    var activeTintColor = this._getActiveTintColor();\n\n    var inactiveTintColor = this._getInactiveTintColor();\n\n    var activeBackgroundColor = this._getActiveBackgroundColor();\n\n    var inactiveBackgroundColor = this._getInactiveBackgroundColor();\n\n    return React.createElement(View, {\n      style: [styles.container, itemsContainerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      }\n    }, items.map((route, index) => {\n      var focused = activeItemKey === route.key;\n      var color = focused ? activeTintColor : inactiveTintColor;\n      var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n      var scene = {\n        route,\n        index,\n        focused,\n        tintColor: color\n      };\n      var icon = renderIcon(scene);\n      var label = getLabel(scene);\n      var accessibilityLabel = typeof label === 'string' ? label : undefined;\n      var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n      return React.createElement(TouchableItem, {\n        key: route.key,\n        accessible: true,\n        accessibilityLabel: accessibilityLabel,\n        onPress: () => {\n          onItemPress({\n            route,\n            focused\n          });\n        },\n        delayPressIn: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        }\n      }, React.createElement(SafeAreaView, {\n        style: [{\n          backgroundColor\n        }, styles.item, itemStyle],\n        forceInset: {\n          [drawerPosition]: 'always',\n          [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n          vertical: 'never'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        }\n      }, icon ? React.createElement(View, {\n        style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        }\n      }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n        style: [styles.label, {\n          color\n        }, labelStyle, extraLabelStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        }\n      }, label) : label));\n    }));\n  }\n\n}\n\nDrawerNavigatorItems.contextType = ThemeContext;\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: {\n    light: '#2196f3',\n    dark: '#fff'\n  },\n  activeBackgroundColor: {\n    light: 'rgba(0, 0, 0, .04)',\n    dark: 'rgba(255, 255, 255, .04)'\n  },\n  inactiveTintColor: {\n    light: 'rgba(0, 0, 0, .87)',\n    dark: 'rgba(255, 255, 255, .87)'\n  },\n  inactiveBackgroundColor: 'transparent'\n};\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default DrawerNavigatorItems;","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-navigation-drawer/dist/views/DrawerNavigatorItems.js"],"names":["React","ThemeContext","SafeAreaView","TouchableItem","DrawerNavigatorItems","Component","_getActiveTintColor","activeTintColor","props","context","_getInactiveTintColor","inactiveTintColor","_getActiveBackgroundColor","activeBackgroundColor","_getInactiveBackgroundColor","inactiveBackgroundColor","render","items","activeItemKey","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","accessibilityLabel","undefined","extraLabelStyle","item","vertical","inactiveIcon","contextType","defaultProps","light","dark","StyleSheet","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { ThemeContext } from '@react-navigation/core';\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from './TouchableItem';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nclass DrawerNavigatorItems extends React.Component {\n  static contextType = ThemeContext;\n\n  _getActiveTintColor = () => {\n    let { activeTintColor } = this.props;\n    if (!activeTintColor) {\n      return;\n    } else if (typeof activeTintColor === 'string') {\n      return activeTintColor;\n    }\n\n    return activeTintColor[this.context];\n  };\n\n  _getInactiveTintColor = () => {\n    let { inactiveTintColor } = this.props;\n    if (!inactiveTintColor) {\n      return;\n    } else if (typeof inactiveTintColor === 'string') {\n      return inactiveTintColor;\n    }\n\n    return inactiveTintColor[this.context];\n  };\n\n  _getActiveBackgroundColor = () => {\n    let { activeBackgroundColor } = this.props;\n    if (!activeBackgroundColor) {\n      return;\n    } else if (typeof activeBackgroundColor === 'string') {\n      return activeBackgroundColor;\n    }\n\n    return activeBackgroundColor[this.context];\n  };\n\n  _getInactiveBackgroundColor = () => {\n    let { inactiveBackgroundColor } = this.props;\n    if (!inactiveBackgroundColor) {\n      return;\n    } else if (typeof inactiveBackgroundColor === 'string') {\n      return inactiveBackgroundColor;\n    }\n\n    return inactiveBackgroundColor[this.context];\n  };\n\n  render() {\n    const {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition\n    } = this.props;\n\n    const activeTintColor = this._getActiveTintColor();\n    const inactiveTintColor = this._getInactiveTintColor();\n    const activeBackgroundColor = this._getActiveBackgroundColor();\n    const inactiveBackgroundColor = this._getInactiveBackgroundColor();\n\n    return <View style={[styles.container, itemsContainerStyle]}>\n        {items.map((route, index) => {\n        const focused = activeItemKey === route.key;\n        const color = focused ? activeTintColor : inactiveTintColor;\n        const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n        const scene = { route, index, focused, tintColor: color };\n        const icon = renderIcon(scene);\n        const label = getLabel(scene);\n        const accessibilityLabel = typeof label === 'string' ? label : undefined;\n        const extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n        return <TouchableItem key={route.key} accessible accessibilityLabel={accessibilityLabel} onPress={() => {\n          onItemPress({ route, focused });\n        }} delayPressIn={0}>\n              <SafeAreaView style={[{ backgroundColor }, styles.item, itemStyle]} forceInset={{\n            [drawerPosition]: 'always',\n            [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n            vertical: 'never'\n          }}>\n                {icon ? <View style={[styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]}>\n                    {icon}\n                  </View> : null}\n                {typeof label === 'string' ? <Text style={[styles.label, { color }, labelStyle, extraLabelStyle]}>\n                    {label}\n                  </Text> : label}\n              </SafeAreaView>\n            </TouchableItem>;\n      })}\n      </View>;\n  }\n}\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: {\n    light: '#2196f3',\n    dark: '#fff'\n  },\n  activeBackgroundColor: {\n    light: 'rgba(0, 0, 0, .04)',\n    dark: 'rgba(255, 255, 255, .04)'\n  },\n  inactiveTintColor: {\n    light: 'rgba(0, 0, 0, .87)',\n    dark: 'rgba(255, 255, 255, .87)'\n  },\n  inactiveBackgroundColor: 'transparent'\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\n\nexport default DrawerNavigatorItems;"]},"metadata":{},"sourceType":"module"}