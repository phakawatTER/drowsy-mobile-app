{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-modal-dropdown/components/ModalDropdown.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ListView from \"react-native-web/dist/exports/ListView\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport PropTypes from 'prop-types';\nvar TOUCHABLE_ELEMENTS = ['TouchableHighlight', 'TouchableOpacity', 'TouchableWithoutFeedback', 'TouchableNativeFeedback'];\nexport default class ModalDropdown extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this._onButtonPress = () => {\n      var {\n        onDropdownWillShow\n      } = this.props;\n\n      if (!onDropdownWillShow || onDropdownWillShow() !== false) {\n        this.show();\n      }\n    };\n\n    this._onRequestClose = () => {\n      var {\n        onDropdownWillHide\n      } = this.props;\n\n      if (!onDropdownWillHide || onDropdownWillHide() !== false) {\n        this.hide();\n      }\n    };\n\n    this._onModalPress = () => {\n      var {\n        onDropdownWillHide\n      } = this.props;\n\n      if (!onDropdownWillHide || onDropdownWillHide() !== false) {\n        this.hide();\n      }\n    };\n\n    this._renderRow = (rowData, sectionID, rowID, highlightRow) => {\n      var {\n        renderRow,\n        dropdownTextStyle,\n        dropdownTextHighlightStyle,\n        accessible\n      } = this.props;\n      var {\n        selectedIndex\n      } = this.state;\n      var key = \"row_\".concat(rowID);\n      var highlighted = rowID == selectedIndex;\n      var row = !renderRow ? React.createElement(Text, {\n        style: [styles.rowText, dropdownTextStyle, highlighted && styles.highlightedRowText, highlighted && dropdownTextHighlightStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        }\n      }, rowData) : renderRow(rowData, rowID, highlighted);\n      var preservedProps = {\n        key,\n        accessible,\n        onPress: () => this._onRowPress(rowData, sectionID, rowID, highlightRow)\n      };\n\n      if (TOUCHABLE_ELEMENTS.find(name => name == row.type.displayName)) {\n        var props = _objectSpread({}, row.props);\n\n        props.key = preservedProps.key;\n        props.onPress = preservedProps.onPress;\n        var {\n          children\n        } = row.props;\n\n        switch (row.type.displayName) {\n          case 'TouchableHighlight':\n            {\n              return React.createElement(TouchableHighlight, _extends({}, props, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 335\n                }\n              }), children);\n            }\n\n          case 'TouchableOpacity':\n            {\n              return React.createElement(TouchableOpacity, _extends({}, props, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 342\n                }\n              }), children);\n            }\n\n          case 'TouchableWithoutFeedback':\n            {\n              return React.createElement(TouchableWithoutFeedback, _extends({}, props, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 349\n                }\n              }), children);\n            }\n\n          case 'TouchableNativeFeedback':\n            {\n              return React.createElement(TouchableNativeFeedback, _extends({}, props, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 356\n                }\n              }), children);\n            }\n\n          default:\n            break;\n        }\n      }\n\n      return React.createElement(TouchableHighlight, _extends({}, preservedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        }\n      }), row);\n    };\n\n    this._renderSeparator = (sectionID, rowID, adjacentRowHighlighted) => {\n      var key = \"spr_\".concat(rowID);\n      return React.createElement(View, {\n        style: styles.separator,\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        }\n      });\n    };\n\n    this._button = null;\n    this._buttonFrame = null;\n    this._nextValue = null;\n    this._nextIndex = null;\n    this.state = {\n      accessible: !!_props.accessible,\n      loading: !_props.options,\n      showDropdown: false,\n      buttonText: _props.defaultValue,\n      selectedIndex: _props.defaultIndex\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    var {\n      buttonText,\n      selectedIndex\n    } = this.state;\n    var {\n      defaultIndex,\n      defaultValue,\n      options\n    } = nextProps;\n    buttonText = this._nextValue == null ? buttonText : this._nextValue;\n    selectedIndex = this._nextIndex == null ? selectedIndex : this._nextIndex;\n\n    if (selectedIndex < 0) {\n      selectedIndex = defaultIndex;\n\n      if (selectedIndex < 0) {\n        buttonText = defaultValue;\n      }\n    }\n\n    this._nextValue = null;\n    this._nextIndex = null;\n    this.setState({\n      loading: !options,\n      buttonText,\n      selectedIndex\n    });\n  }\n\n  render() {\n    return React.createElement(View, _extends({}, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      }\n    }), this._renderButton(), this._renderModal());\n  }\n\n  _updatePosition(callback) {\n    if (this._button && this._button.measure) {\n      this._button.measure((fx, fy, width, height, px, py) => {\n        this._buttonFrame = {\n          x: px,\n          y: py,\n          w: width,\n          h: height\n        };\n        callback && callback();\n      });\n    }\n  }\n\n  show() {\n    this._updatePosition(() => {\n      this.setState({\n        showDropdown: true\n      });\n    });\n  }\n\n  hide() {\n    this.setState({\n      showDropdown: false\n    });\n  }\n\n  select(idx) {\n    var {\n      defaultValue,\n      options,\n      defaultIndex,\n      renderButtonText\n    } = this.props;\n    var value = defaultValue;\n\n    if (idx == null || !options || idx >= options.length) {\n      idx = defaultIndex;\n    }\n\n    if (idx >= 0) {\n      value = renderButtonText ? renderButtonText(options[idx]) : options[idx].toString();\n    }\n\n    this._nextValue = value;\n    this._nextIndex = idx;\n    this.setState({\n      buttonText: value,\n      selectedIndex: idx\n    });\n  }\n\n  _renderButton() {\n    var {\n      disabled,\n      accessible,\n      children,\n      textStyle\n    } = this.props;\n    var {\n      buttonText\n    } = this.state;\n    return React.createElement(TouchableOpacity, {\n      ref: button => this._button = button,\n      disabled: disabled,\n      accessible: accessible,\n      onPress: this._onButtonPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      }\n    }, children || React.createElement(View, {\n      style: styles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      }\n    }, React.createElement(Text, {\n      style: [styles.buttonText, textStyle],\n      numberOfLines: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      }\n    }, buttonText)));\n  }\n\n  _renderModal() {\n    var {\n      animated,\n      accessible,\n      dropdownStyle\n    } = this.props;\n    var {\n      showDropdown,\n      loading\n    } = this.state;\n\n    if (showDropdown && this._buttonFrame) {\n      var frameStyle = this._calcPosition();\n\n      var animationType = animated ? 'fade' : 'none';\n      return React.createElement(Modal, {\n        animationType: animationType,\n        visible: true,\n        transparent: true,\n        onRequestClose: this._onRequestClose,\n        supportedOrientations: ['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        accessible: accessible,\n        disabled: !showDropdown,\n        onPress: this._onModalPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        }\n      }, React.createElement(View, {\n        style: styles.modal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        }\n      }, React.createElement(View, {\n        style: [styles.dropdown, dropdownStyle, frameStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        }\n      }, loading ? this._renderLoading() : this._renderDropdown()))));\n    }\n  }\n\n  _calcPosition() {\n    var {\n      dropdownStyle,\n      style,\n      adjustFrame\n    } = this.props;\n    var dimensions = Dimensions.get('window');\n    var windowWidth = dimensions.width;\n    var windowHeight = dimensions.height;\n    var dropdownHeight = dropdownStyle && StyleSheet.flatten(dropdownStyle).height || StyleSheet.flatten(styles.dropdown).height;\n    var bottomSpace = windowHeight - this._buttonFrame.y - this._buttonFrame.h;\n    var rightSpace = windowWidth - this._buttonFrame.x;\n    var showInBottom = bottomSpace >= dropdownHeight || bottomSpace >= this._buttonFrame.y;\n    var showInLeft = rightSpace >= this._buttonFrame.x;\n    var positionStyle = {\n      height: dropdownHeight,\n      top: showInBottom ? this._buttonFrame.y + this._buttonFrame.h : Math.max(0, this._buttonFrame.y - dropdownHeight)\n    };\n\n    if (showInLeft) {\n      positionStyle.left = this._buttonFrame.x;\n    } else {\n      var dropdownWidth = dropdownStyle && StyleSheet.flatten(dropdownStyle).width || style && StyleSheet.flatten(style).width || -1;\n\n      if (dropdownWidth !== -1) {\n        positionStyle.width = dropdownWidth;\n      }\n\n      positionStyle.right = rightSpace - this._buttonFrame.w;\n    }\n\n    return adjustFrame ? adjustFrame(positionStyle) : positionStyle;\n  }\n\n  _renderLoading() {\n    return React.createElement(ActivityIndicator, {\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      }\n    });\n  }\n\n  _renderDropdown() {\n    var {\n      scrollEnabled,\n      renderSeparator,\n      showsVerticalScrollIndicator,\n      keyboardShouldPersistTaps\n    } = this.props;\n    return React.createElement(ListView, {\n      scrollEnabled: scrollEnabled,\n      style: styles.list,\n      dataSource: this._dataSource,\n      renderRow: this._renderRow,\n      renderSeparator: renderSeparator || this._renderSeparator,\n      automaticallyAdjustContentInsets: false,\n      showsVerticalScrollIndicator: showsVerticalScrollIndicator,\n      keyboardShouldPersistTaps: keyboardShouldPersistTaps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      }\n    });\n  }\n\n  get _dataSource() {\n    var {\n      options\n    } = this.props;\n    var ds = new ListView.DataSource({\n      rowHasChanged: (r1, r2) => r1 !== r2\n    });\n    return ds.cloneWithRows(options);\n  }\n\n  _onRowPress(rowData, sectionID, rowID, highlightRow) {\n    var {\n      onSelect,\n      renderButtonText,\n      onDropdownWillHide\n    } = this.props;\n\n    if (!onSelect || onSelect(rowID, rowData) !== false) {\n      highlightRow(sectionID, rowID);\n      var value = renderButtonText && renderButtonText(rowData) || rowData.toString();\n      this._nextValue = value;\n      this._nextIndex = rowID;\n      this.setState({\n        buttonText: value,\n        selectedIndex: rowID\n      });\n    }\n\n    if (!onDropdownWillHide || onDropdownWillHide() !== false) {\n      this.setState({\n        showDropdown: false\n      });\n    }\n  }\n\n}\nModalDropdown.propTypes = {\n  disabled: PropTypes.bool,\n  scrollEnabled: PropTypes.bool,\n  defaultIndex: PropTypes.number,\n  defaultValue: PropTypes.string,\n  options: PropTypes.array,\n  accessible: PropTypes.bool,\n  animated: PropTypes.bool,\n  showsVerticalScrollIndicator: PropTypes.bool,\n  keyboardShouldPersistTaps: PropTypes.string,\n  style: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.array]),\n  textStyle: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.array]),\n  dropdownStyle: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.array]),\n  dropdownTextStyle: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.array]),\n  dropdownTextHighlightStyle: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.array]),\n  adjustFrame: PropTypes.func,\n  renderRow: PropTypes.func,\n  renderSeparator: PropTypes.func,\n  renderButtonText: PropTypes.func,\n  onDropdownWillShow: PropTypes.func,\n  onDropdownWillHide: PropTypes.func,\n  onSelect: PropTypes.func\n};\nModalDropdown.defaultProps = {\n  disabled: false,\n  scrollEnabled: true,\n  defaultIndex: -1,\n  defaultValue: 'Please select...',\n  options: null,\n  animated: true,\n  showsVerticalScrollIndicator: true,\n  keyboardShouldPersistTaps: 'never'\n};\nvar styles = StyleSheet.create({\n  button: {\n    justifyContent: 'center'\n  },\n  buttonText: {\n    fontSize: 12\n  },\n  modal: {\n    flexGrow: 1\n  },\n  dropdown: {\n    position: 'absolute',\n    height: (33 + StyleSheet.hairlineWidth) * 5,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: 'lightgray',\n    borderRadius: 2,\n    backgroundColor: 'white',\n    justifyContent: 'center'\n  },\n  loading: {\n    alignSelf: 'center'\n  },\n  list: {},\n  rowText: {\n    paddingHorizontal: 6,\n    paddingVertical: 10,\n    fontSize: 11,\n    color: 'gray',\n    backgroundColor: 'white',\n    textAlignVertical: 'center'\n  },\n  highlightedRowText: {\n    color: 'black'\n  },\n  separator: {\n    height: StyleSheet.hairlineWidth,\n    backgroundColor: 'lightgray'\n  }\n});","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-modal-dropdown/components/ModalDropdown.js"],"names":["React","Component","PropTypes","TOUCHABLE_ELEMENTS","ModalDropdown","constructor","props","_onButtonPress","onDropdownWillShow","show","_onRequestClose","onDropdownWillHide","hide","_onModalPress","_renderRow","rowData","sectionID","rowID","highlightRow","renderRow","dropdownTextStyle","dropdownTextHighlightStyle","accessible","selectedIndex","state","key","highlighted","row","styles","rowText","highlightedRowText","preservedProps","onPress","_onRowPress","find","name","type","displayName","children","_renderSeparator","adjacentRowHighlighted","separator","_button","_buttonFrame","_nextValue","_nextIndex","loading","options","showDropdown","buttonText","defaultValue","defaultIndex","componentWillReceiveProps","nextProps","setState","render","_renderButton","_renderModal","_updatePosition","callback","measure","fx","fy","width","height","px","py","x","y","w","h","select","idx","renderButtonText","value","length","toString","disabled","textStyle","button","animated","dropdownStyle","frameStyle","_calcPosition","animationType","modal","dropdown","_renderLoading","_renderDropdown","style","adjustFrame","dimensions","Dimensions","get","windowWidth","windowHeight","dropdownHeight","StyleSheet","flatten","bottomSpace","rightSpace","showInBottom","showInLeft","positionStyle","top","Math","max","left","dropdownWidth","right","scrollEnabled","renderSeparator","showsVerticalScrollIndicator","keyboardShouldPersistTaps","list","_dataSource","ds","ListView","DataSource","rowHasChanged","r1","r2","cloneWithRows","onSelect","propTypes","bool","number","string","array","oneOfType","object","func","defaultProps","create","justifyContent","fontSize","flexGrow","position","hairlineWidth","borderWidth","borderColor","borderRadius","backgroundColor","alignSelf","paddingHorizontal","paddingVertical","color","textAlignVertical"],"mappings":"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","sourcesContent":["/**\n * Created by sohobloo on 16/9/13.\n */\n\n'use strict';\n\nimport React, {\n  Component,\n} from 'react';\n\nimport {\n  StyleSheet,\n  Dimensions,\n  View,\n  Text,\n  ListView,\n  TouchableWithoutFeedback,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  TouchableHighlight,\n  Modal,\n  ActivityIndicator,\n} from 'react-native';\n\nimport PropTypes from 'prop-types';\n\nconst TOUCHABLE_ELEMENTS = [\n  'TouchableHighlight',\n  'TouchableOpacity',\n  'TouchableWithoutFeedback',\n  'TouchableNativeFeedback'\n];\n\nexport default class ModalDropdown extends Component {\n  static propTypes = {\n    disabled: PropTypes.bool,\n    scrollEnabled: PropTypes.bool,\n    defaultIndex: PropTypes.number,\n    defaultValue: PropTypes.string,\n    options: PropTypes.array,\n\n    accessible: PropTypes.bool,\n    animated: PropTypes.bool,\n    showsVerticalScrollIndicator: PropTypes.bool,\n    keyboardShouldPersistTaps: PropTypes.string,\n\n    style: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.array]),\n    textStyle: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.array]),\n    dropdownStyle: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.array]),\n    dropdownTextStyle: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.array]),\n    dropdownTextHighlightStyle: PropTypes.oneOfType([PropTypes.number, PropTypes.object, PropTypes.array]),\n\n    adjustFrame: PropTypes.func,\n    renderRow: PropTypes.func,\n    renderSeparator: PropTypes.func,\n    renderButtonText: PropTypes.func,\n\n    onDropdownWillShow: PropTypes.func,\n    onDropdownWillHide: PropTypes.func,\n    onSelect: PropTypes.func\n  };\n\n  static defaultProps = {\n    disabled: false,\n    scrollEnabled: true,\n    defaultIndex: -1,\n    defaultValue: 'Please select...',\n    options: null,\n    animated: true,\n    showsVerticalScrollIndicator: true,\n    keyboardShouldPersistTaps: 'never'\n  };\n\n  constructor(props) {\n    super(props);\n\n    this._button = null;\n    this._buttonFrame = null;\n    this._nextValue = null;\n    this._nextIndex = null;\n\n    this.state = {\n      accessible: !!props.accessible,\n      loading: !props.options,\n      showDropdown: false,\n      buttonText: props.defaultValue,\n      selectedIndex: props.defaultIndex\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let {buttonText, selectedIndex} = this.state;\n    const {defaultIndex, defaultValue, options} = nextProps;\n    buttonText = this._nextValue == null ? buttonText : this._nextValue;\n    selectedIndex = this._nextIndex == null ? selectedIndex : this._nextIndex;\n    if (selectedIndex < 0) {\n      selectedIndex = defaultIndex;\n      if (selectedIndex < 0) {\n        buttonText = defaultValue;\n      }\n    }\n    this._nextValue = null;\n    this._nextIndex = null;\n\n    this.setState({\n      loading: !options,\n      buttonText,\n      selectedIndex\n    });\n  }\n\n  render() {\n    return (\n      <View {...this.props}>\n        {this._renderButton()}\n        {this._renderModal()}\n      </View>\n    );\n  }\n\n  _updatePosition(callback) {\n    if (this._button && this._button.measure) {\n      this._button.measure((fx, fy, width, height, px, py) => {\n        this._buttonFrame = {x: px, y: py, w: width, h: height};\n        callback && callback();\n      });\n    }\n  }\n\n  show() {\n    this._updatePosition(() => {\n      this.setState({\n        showDropdown: true\n      });\n    });\n  }\n\n  hide() {\n    this.setState({\n      showDropdown: false\n    });\n  }\n\n  select(idx) {\n    const {defaultValue, options, defaultIndex, renderButtonText} = this.props;\n\n    let value = defaultValue;\n    if (idx == null || !options || idx >= options.length) {\n      idx = defaultIndex;\n    }\n\n    if (idx >= 0) {\n      value = renderButtonText ? renderButtonText(options[idx]) : options[idx].toString();\n    }\n\n    this._nextValue = value;\n    this._nextIndex = idx;\n\n    this.setState({\n      buttonText: value,\n      selectedIndex: idx\n    });\n  }\n\n  _renderButton() {\n    const {disabled, accessible, children, textStyle} = this.props;\n    const {buttonText} = this.state;\n\n    return (\n      <TouchableOpacity ref={button => this._button = button}\n                        disabled={disabled}\n                        accessible={accessible}\n                        onPress={this._onButtonPress}\n      >\n        {\n          children ||\n          (\n            <View style={styles.button}>\n              <Text style={[styles.buttonText, textStyle]}\n                    numberOfLines={1}\n              >\n                {buttonText}\n              </Text>\n            </View>\n          )\n        }\n      </TouchableOpacity>\n    );\n  }\n\n  _onButtonPress = () => {\n    const {onDropdownWillShow} = this.props;\n    if (!onDropdownWillShow ||\n      onDropdownWillShow() !== false) {\n      this.show();\n    }\n  };\n\n  _renderModal() {\n    const {animated, accessible, dropdownStyle} = this.props;\n    const {showDropdown, loading} = this.state;\n    if (showDropdown && this._buttonFrame) {\n      const frameStyle = this._calcPosition();\n      const animationType = animated ? 'fade' : 'none';\n      return (\n        <Modal animationType={animationType}\n               visible={true}\n               transparent={true}\n               onRequestClose={this._onRequestClose}\n               supportedOrientations={['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right']}\n        >\n          <TouchableWithoutFeedback accessible={accessible}\n                                    disabled={!showDropdown}\n                                    onPress={this._onModalPress}\n          >\n            <View style={styles.modal}>\n              <View style={[styles.dropdown, dropdownStyle, frameStyle]}>\n                {loading ? this._renderLoading() : this._renderDropdown()}\n              </View>\n            </View>\n          </TouchableWithoutFeedback>\n        </Modal>\n      );\n    }\n  }\n\n  _calcPosition() {\n    const {dropdownStyle, style, adjustFrame} = this.props;\n\n    const dimensions = Dimensions.get('window');\n    const windowWidth = dimensions.width;\n    const windowHeight = dimensions.height;\n\n    const dropdownHeight = (dropdownStyle && StyleSheet.flatten(dropdownStyle).height) ||\n      StyleSheet.flatten(styles.dropdown).height;\n\n    const bottomSpace = windowHeight - this._buttonFrame.y - this._buttonFrame.h;\n    const rightSpace = windowWidth - this._buttonFrame.x;\n    const showInBottom = bottomSpace >= dropdownHeight || bottomSpace >= this._buttonFrame.y;\n    const showInLeft = rightSpace >= this._buttonFrame.x;\n\n    const positionStyle = {\n      height: dropdownHeight,\n      top: showInBottom ? this._buttonFrame.y + this._buttonFrame.h : Math.max(0, this._buttonFrame.y - dropdownHeight),\n    };\n\n    if (showInLeft) {\n      positionStyle.left = this._buttonFrame.x;\n    } else {\n      const dropdownWidth = (dropdownStyle && StyleSheet.flatten(dropdownStyle).width) ||\n        (style && StyleSheet.flatten(style).width) || -1;\n      if (dropdownWidth !== -1) {\n        positionStyle.width = dropdownWidth;\n      }\n      positionStyle.right = rightSpace - this._buttonFrame.w;\n    }\n\n    return adjustFrame ? adjustFrame(positionStyle) : positionStyle;\n  }\n\n  _onRequestClose = () => {\n    const {onDropdownWillHide} = this.props;\n    if (!onDropdownWillHide ||\n      onDropdownWillHide() !== false) {\n      this.hide();\n    }\n  };\n\n  _onModalPress = () => {\n    const {onDropdownWillHide} = this.props;\n    if (!onDropdownWillHide ||\n      onDropdownWillHide() !== false) {\n      this.hide();\n    }\n  };\n\n  _renderLoading() {\n    return (\n      <ActivityIndicator size='small'/>\n    );\n  }\n\n  _renderDropdown() {\n    const {scrollEnabled, renderSeparator, showsVerticalScrollIndicator, keyboardShouldPersistTaps} = this.props;\n    return (\n      <ListView scrollEnabled={scrollEnabled}\n                style={styles.list}\n                dataSource={this._dataSource}\n                renderRow={this._renderRow}\n                renderSeparator={renderSeparator || this._renderSeparator}\n                automaticallyAdjustContentInsets={false}\n                showsVerticalScrollIndicator={showsVerticalScrollIndicator}\n                keyboardShouldPersistTaps={keyboardShouldPersistTaps}\n      />\n    );\n  }\n\n  get _dataSource() {\n    const {options} = this.props;\n    const ds = new ListView.DataSource({\n      rowHasChanged: (r1, r2) => r1 !== r2\n    });\n    return ds.cloneWithRows(options);\n  }\n\n  _renderRow = (rowData, sectionID, rowID, highlightRow) => {\n    const {renderRow, dropdownTextStyle, dropdownTextHighlightStyle, accessible} = this.props;\n    const {selectedIndex} = this.state;\n    const key = `row_${rowID}`;\n    const highlighted = rowID == selectedIndex;\n    const row = !renderRow ?\n      (<Text style={[\n        styles.rowText,\n        dropdownTextStyle,\n        highlighted && styles.highlightedRowText,\n        highlighted && dropdownTextHighlightStyle\n      ]}\n      >\n        {rowData}\n      </Text>) :\n      renderRow(rowData, rowID, highlighted);\n    const preservedProps = {\n      key,\n      accessible,\n      onPress: () => this._onRowPress(rowData, sectionID, rowID, highlightRow),\n    };\n    if (TOUCHABLE_ELEMENTS.find(name => name == row.type.displayName)) {\n      const props = {...row.props};\n      props.key = preservedProps.key;\n      props.onPress = preservedProps.onPress;\n      const {children} = row.props;\n      switch (row.type.displayName) {\n        case 'TouchableHighlight': {\n          return (\n            <TouchableHighlight {...props}>\n              {children}\n            </TouchableHighlight>\n          );\n        }\n        case 'TouchableOpacity': {\n          return (\n            <TouchableOpacity {...props}>\n              {children}\n            </TouchableOpacity>\n          );\n        }\n        case 'TouchableWithoutFeedback': {\n          return (\n            <TouchableWithoutFeedback {...props}>\n              {children}\n            </TouchableWithoutFeedback>\n          );\n        }\n        case 'TouchableNativeFeedback': {\n          return (\n            <TouchableNativeFeedback {...props}>\n              {children}\n            </TouchableNativeFeedback>\n          );\n        }\n        default:\n          break;\n      }\n    }\n    return (\n      <TouchableHighlight {...preservedProps}>\n        {row}\n      </TouchableHighlight>\n    );\n  };\n\n  _onRowPress(rowData, sectionID, rowID, highlightRow) {\n    const {onSelect, renderButtonText, onDropdownWillHide} = this.props;\n    if (!onSelect || onSelect(rowID, rowData) !== false) {\n      highlightRow(sectionID, rowID);\n      const value = renderButtonText && renderButtonText(rowData) || rowData.toString();\n      this._nextValue = value;\n      this._nextIndex = rowID;\n      this.setState({\n        buttonText: value,\n        selectedIndex: rowID\n      });\n    }\n    if (!onDropdownWillHide || onDropdownWillHide() !== false) {\n      this.setState({\n        showDropdown: false\n      });\n    }\n  }\n\n  _renderSeparator = (sectionID, rowID, adjacentRowHighlighted) => {\n    const key = `spr_${rowID}`;\n    return (\n      <View style={styles.separator}\n            key={key}\n      />\n    );\n  };\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    justifyContent: 'center'\n  },\n  buttonText: {\n    fontSize: 12\n  },\n  modal: {\n    flexGrow: 1\n  },\n  dropdown: {\n    position: 'absolute',\n    height: (33 + StyleSheet.hairlineWidth) * 5,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: 'lightgray',\n    borderRadius: 2,\n    backgroundColor: 'white',\n    justifyContent: 'center'\n  },\n  loading: {\n    alignSelf: 'center'\n  },\n  list: {\n    //flexGrow: 1,\n  },\n  rowText: {\n    paddingHorizontal: 6,\n    paddingVertical: 10,\n    fontSize: 11,\n    color: 'gray',\n    backgroundColor: 'white',\n    textAlignVertical: 'center'\n  },\n  highlightedRowText: {\n    color: 'black'\n  },\n  separator: {\n    height: StyleSheet.hairlineWidth,\n    backgroundColor: 'lightgray'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}