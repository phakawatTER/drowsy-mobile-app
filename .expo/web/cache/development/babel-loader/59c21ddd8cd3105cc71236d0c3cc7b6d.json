{"ast":null,"code":"var _jsxFileName = \"/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-svg-charts/src/y-axis.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Svg, G, Text as SVGText } from 'react-native-svg';\nimport * as d3Scale from 'd3-scale';\nimport * as array from 'd3-array';\n\nclass YAxis extends PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      height: 0,\n      width: 0\n    };\n  }\n\n  _onLayout(event) {\n    var {\n      nativeEvent: {\n        layout: {\n          height,\n          width\n        }\n      }\n    } = event;\n    this.setState({\n      height,\n      width\n    });\n  }\n\n  getY(domain) {\n    var {\n      scale,\n      spacingInner,\n      spacingOuter,\n      contentInset: {\n        top = 0,\n        bottom = 0\n      }\n    } = this.props;\n    var {\n      height\n    } = this.state;\n    var y = scale().domain(domain).range([height - bottom, top]);\n\n    if (scale === d3Scale.scaleBand) {\n      y.range([top, height - bottom]).paddingInner([spacingInner]).paddingOuter([spacingOuter]);\n      return value => y(value) + y.bandwidth() / 2;\n    }\n\n    return y;\n  }\n\n  render() {\n    var {\n      style,\n      data,\n      scale,\n      yAccessor,\n      numberOfTicks,\n      formatLabel,\n      svg,\n      children\n    } = this.props;\n    var {\n      height,\n      width\n    } = this.state;\n\n    if (data.length === 0) {\n      return React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        }\n      });\n    }\n\n    var values = data.map((item, index) => yAccessor({\n      item,\n      index\n    }));\n    var extent = array.extent(values);\n    var {\n      min = extent[0],\n      max = extent[1]\n    } = this.props;\n    var domain = scale === d3Scale.scaleBand ? values : [min, max];\n    var y = this.getY(domain);\n    var ticks = scale === d3Scale.scaleBand ? values : y.ticks(numberOfTicks);\n    var longestValue = ticks.map((value, index) => formatLabel(value, index)).reduce((prev, curr) => prev.toString().length > curr.toString().length ? prev : curr, 0);\n    var extraProps = {\n      y,\n      ticks,\n      width,\n      height,\n      formatLabel\n    };\n    return React.createElement(View, {\n      style: [style],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      }\n    }, React.createElement(View, {\n      style: {\n        flexGrow: 1\n      },\n      onLayout: event => this._onLayout(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      }\n    }, React.createElement(Text, {\n      style: {\n        opacity: 0,\n        fontSize: svg.fontSize\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      }\n    }, longestValue), height > 0 && width > 0 && React.createElement(Svg, {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height,\n        width\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      }\n    }, React.createElement(G, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      }\n    }, React.Children.map(children, child => {\n      return React.cloneElement(child, extraProps);\n    }), height > 0 && ticks.map((value, index) => {\n      return React.createElement(SVGText, _extends({\n        originY: y(value),\n        textAnchor: 'middle',\n        x: '50%',\n        alignmentBaseline: 'middle'\n      }, svg, {\n        key: y(value),\n        y: y(value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        }\n      }), formatLabel(value, index, ticks.length));\n    })))));\n  }\n\n}\n\nYAxis.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object), PropTypes.arrayOf(PropTypes.number)]).isRequired,\n  svg: PropTypes.object,\n  style: PropTypes.any,\n  numberOfTicks: PropTypes.number,\n  formatLabel: PropTypes.func,\n  contentInset: PropTypes.shape({\n    top: PropTypes.number,\n    bottom: PropTypes.number\n  }),\n  min: PropTypes.number,\n  max: PropTypes.number,\n  yAccessor: PropTypes.func,\n  scale: PropTypes.func,\n  spacingInner: PropTypes.number,\n  spacingOuter: PropTypes.number\n};\nYAxis.defaultProps = {\n  numberOfTicks: 10,\n  spacingInner: 0.05,\n  spacingOuter: 0.05,\n  contentInset: {},\n  svg: {},\n  scale: d3Scale.scaleLinear,\n  formatLabel: value => value && value.toString(),\n  yAccessor: (_ref) => {\n    var {\n      item\n    } = _ref;\n    return item;\n  }\n};\nexport default YAxis;","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-svg-charts/src/y-axis.js"],"names":["React","PureComponent","PropTypes","Svg","G","Text","SVGText","d3Scale","array","YAxis","state","height","width","_onLayout","event","nativeEvent","layout","setState","getY","domain","scale","spacingInner","spacingOuter","contentInset","top","bottom","props","y","range","scaleBand","paddingInner","paddingOuter","value","bandwidth","render","style","data","yAccessor","numberOfTicks","formatLabel","svg","children","length","values","map","item","index","extent","min","max","ticks","longestValue","reduce","prev","curr","toString","extraProps","flexGrow","opacity","fontSize","position","left","Children","child","cloneElement","propTypes","oneOfType","arrayOf","object","number","isRequired","any","func","shape","defaultProps","scaleLinear"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text, View } from 'react-native'\nimport { Svg, G, Text as SVGText } from 'react-native-svg'\nimport * as d3Scale from 'd3-scale'\nimport * as array from 'd3-array'\n\nclass YAxis extends PureComponent {\n    state = {\n        height: 0,\n        width: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { height, width },\n            },\n        } = event\n        this.setState({ height, width })\n    }\n\n    getY(domain) {\n        const {\n            scale,\n            spacingInner,\n            spacingOuter,\n            contentInset: { top = 0, bottom = 0 },\n        } = this.props\n\n        const { height } = this.state\n\n        const y = scale()\n            .domain(domain)\n            .range([height - bottom, top])\n\n        if (scale === d3Scale.scaleBand) {\n            // use index as domain identifier instead of value since\n            // same value can occur at several places in dataPoints\n            y\n                // set range top to bottom - we are not sorting on values in scaleBand\n                .range([top, height - bottom])\n                .paddingInner([spacingInner])\n                .paddingOuter([spacingOuter])\n\n            //add half a bar to center label\n            return (value) => y(value) + y.bandwidth() / 2\n        }\n\n        return y\n    }\n\n    render() {\n        const { style, data, scale, yAccessor, numberOfTicks, formatLabel, svg, children } = this.props\n\n        const { height, width } = this.state\n\n        if (data.length === 0) {\n            return <View style={style} />\n        }\n\n        const values = data.map((item, index) => yAccessor({ item, index }))\n\n        const extent = array.extent(values)\n\n        const { min = extent[0], max = extent[1] } = this.props\n\n        const domain = scale === d3Scale.scaleBand ? values : [min, max]\n\n        //invert range to support svg coordinate system\n        const y = this.getY(domain)\n\n        const ticks = scale === d3Scale.scaleBand ? values : y.ticks(numberOfTicks)\n\n        const longestValue = ticks\n            .map((value, index) => formatLabel(value, index))\n            .reduce((prev, curr) => (prev.toString().length > curr.toString().length ? prev : curr), 0)\n\n        const extraProps = {\n            y,\n            ticks,\n            width,\n            height,\n            formatLabel,\n        }\n\n        return (\n            <View style={[style]}>\n                <View style={{ flexGrow: 1 }} onLayout={(event) => this._onLayout(event)}>\n                    {/*invisible text to allow for parent resizing*/}\n                    <Text style={{ opacity: 0, fontSize: svg.fontSize }}>{longestValue}</Text>\n                    {height > 0 && width > 0 && (\n                        <Svg\n                            style={{\n                                position: 'absolute',\n                                top: 0,\n                                left: 0,\n                                height,\n                                width,\n                            }}\n                        >\n                            <G>\n                                {React.Children.map(children, (child) => {\n                                    return React.cloneElement(child, extraProps)\n                                })}\n                                {// don't render labels if width isn't measured yet,\n                                // causes rendering issues\n                                height > 0 &&\n                                    ticks.map((value, index) => {\n                                        return (\n                                            <SVGText\n                                                originY={y(value)}\n                                                textAnchor={'middle'}\n                                                x={'50%'}\n                                                alignmentBaseline={'middle'}\n                                                {...svg}\n                                                key={y(value)}\n                                                y={y(value)}\n                                            >\n                                                {formatLabel(value, index, ticks.length)}\n                                            </SVGText>\n                                        )\n                                    })}\n                            </G>\n                        </Svg>\n                    )}\n                </View>\n            </View>\n        )\n    }\n}\n\nYAxis.propTypes = {\n    data: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object), PropTypes.arrayOf(PropTypes.number)]).isRequired,\n    svg: PropTypes.object,\n    style: PropTypes.any,\n    numberOfTicks: PropTypes.number,\n    formatLabel: PropTypes.func,\n    contentInset: PropTypes.shape({\n        top: PropTypes.number,\n        bottom: PropTypes.number,\n    }),\n    min: PropTypes.number,\n    max: PropTypes.number,\n    yAccessor: PropTypes.func,\n    scale: PropTypes.func,\n    spacingInner: PropTypes.number,\n    spacingOuter: PropTypes.number,\n}\n\nYAxis.defaultProps = {\n    numberOfTicks: 10,\n    spacingInner: 0.05,\n    spacingOuter: 0.05,\n    contentInset: {},\n    svg: {},\n    scale: d3Scale.scaleLinear,\n    formatLabel: (value) => value && value.toString(),\n    yAccessor: ({ item }) => item,\n}\n\nexport default YAxis\n"]},"metadata":{},"sourceType":"module"}