{"ast":null,"code":"var _jsxFileName = \"/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-svg-charts/src/chart/chart-grouped.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as array from 'd3-array';\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Svg from 'react-native-svg';\nimport Path from \"../animated-path\";\nimport Chart from \"./chart\";\n\nclass ChartGrouped extends PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      width: 0,\n      height: 0\n    };\n  }\n\n  _onLayout(event) {\n    var {\n      nativeEvent: {\n        layout: {\n          height,\n          width\n        }\n      }\n    } = event;\n    this.setState({\n      height,\n      width\n    });\n  }\n\n  createPaths() {\n    throw 'Extending \"ChartGrouped\" requires you to override \"createPaths';\n  }\n\n  render() {\n    var {\n      data,\n      xAccessor,\n      yAccessor,\n      yScale,\n      xScale,\n      style,\n      animate,\n      animationDuration,\n      numberOfTicks,\n      contentInset: {\n        top = 0,\n        bottom = 0,\n        left = 0,\n        right = 0\n      },\n      gridMax,\n      gridMin,\n      clampX,\n      clampY,\n      svg,\n      children\n    } = this.props;\n    var {\n      width,\n      height\n    } = this.state;\n\n    if (data.length === 0) {\n      return React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        }\n      });\n    }\n\n    var mappedData = data.map(dataArray => dataArray.data.map((item, index) => ({\n      y: yAccessor({\n        item,\n        index\n      }),\n      x: xAccessor({\n        item,\n        index\n      })\n    })));\n    var yValues = array.merge(mappedData).map(item => item.y);\n    var xValues = array.merge(mappedData).map(item => item.x);\n    var yExtent = array.extent([...yValues, gridMin, gridMax]);\n    var xExtent = array.extent([...xValues]);\n    var {\n      yMin = yExtent[0],\n      yMax = yExtent[1],\n      xMin = xExtent[0],\n      xMax = xExtent[1]\n    } = this.props;\n    var y = yScale().domain([yMin, yMax]).range([height - bottom, top]).clamp(clampY);\n    var x = xScale().domain([xMin, xMax]).range([left, width - right]).clamp(clampX);\n    var paths = this.createPaths({\n      data: mappedData,\n      x,\n      y\n    });\n    var ticks = y.ticks(numberOfTicks);\n\n    var extraProps = _objectSpread({\n      x,\n      y,\n      data,\n      ticks,\n      width,\n      height\n    }, paths);\n\n    return React.createElement(View, {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      }\n    }, React.createElement(View, {\n      style: {\n        flex: 1\n      },\n      onLayout: event => this._onLayout(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      }\n    }, height > 0 && width > 0 && React.createElement(Svg, {\n      style: {\n        height,\n        width\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      }\n    }, React.Children.map(children, child => {\n      if (child && child.props.belowChart) {\n        return React.cloneElement(child, extraProps);\n      }\n\n      return null;\n    }), paths.path.map((path, index) => {\n      var {\n        svg: pathSvg\n      } = data[index];\n      return React.createElement(Path, _extends({\n        key: path,\n        fill: 'none'\n      }, svg, pathSvg, {\n        d: path,\n        animate: animate,\n        animationDuration: animationDuration,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        }\n      }));\n    }), React.Children.map(children, child => {\n      if (child && !child.props.belowChart) {\n        return React.cloneElement(child, extraProps);\n      }\n\n      return null;\n    }))));\n  }\n\n}\n\nChartGrouped.propTypes = _objectSpread({}, Chart.propTypes, {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    data: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object), PropTypes.arrayOf(PropTypes.number), PropTypes.arrayOf(PropTypes.array)]),\n    svg: PropTypes.object\n  })).isRequired\n});\nChartGrouped.defaultProps = _objectSpread({}, Chart.defaultProps);\nexport default ChartGrouped;","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-svg-charts/src/chart/chart-grouped.js"],"names":["array","PropTypes","React","PureComponent","Svg","Path","Chart","ChartGrouped","state","width","height","_onLayout","event","nativeEvent","layout","setState","createPaths","render","data","xAccessor","yAccessor","yScale","xScale","style","animate","animationDuration","numberOfTicks","contentInset","top","bottom","left","right","gridMax","gridMin","clampX","clampY","svg","children","props","length","mappedData","map","dataArray","item","index","y","x","yValues","merge","xValues","yExtent","extent","xExtent","yMin","yMax","xMin","xMax","domain","range","clamp","paths","ticks","extraProps","flex","Children","child","belowChart","cloneElement","path","pathSvg","propTypes","arrayOf","shape","oneOfType","object","number","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import * as array from 'd3-array'\nimport PropTypes from 'prop-types'\nimport React, { PureComponent } from 'react'\nimport { View } from 'react-native'\nimport Svg from 'react-native-svg'\nimport Path from '../animated-path'\nimport Chart from './chart'\n\nclass ChartGrouped extends PureComponent {\n    state = {\n        width: 0,\n        height: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { height, width },\n            },\n        } = event\n        this.setState({ height, width })\n    }\n\n    createPaths() {\n        throw 'Extending \"ChartGrouped\" requires you to override \"createPaths'\n    }\n\n    render() {\n        const {\n            data,\n            xAccessor,\n            yAccessor,\n            yScale,\n            xScale,\n            style,\n            animate,\n            animationDuration,\n            numberOfTicks,\n            contentInset: { top = 0, bottom = 0, left = 0, right = 0 },\n            gridMax,\n            gridMin,\n            clampX,\n            clampY,\n            svg,\n            children,\n        } = this.props\n\n        const { width, height } = this.state\n\n        if (data.length === 0) {\n            return <View style={style} />\n        }\n\n        const mappedData = data.map((dataArray) =>\n            dataArray.data.map((item, index) => ({\n                y: yAccessor({ item, index }),\n                x: xAccessor({ item, index }),\n            }))\n        )\n\n        const yValues = array.merge(mappedData).map((item) => item.y)\n        const xValues = array.merge(mappedData).map((item) => item.x)\n\n        const yExtent = array.extent([...yValues, gridMin, gridMax])\n        const xExtent = array.extent([...xValues])\n\n        const { yMin = yExtent[0], yMax = yExtent[1], xMin = xExtent[0], xMax = xExtent[1] } = this.props\n\n        //invert range to support svg coordinate system\n        const y = yScale()\n            .domain([yMin, yMax])\n            .range([height - bottom, top])\n            .clamp(clampY)\n\n        const x = xScale()\n            .domain([xMin, xMax])\n            .range([left, width - right])\n            .clamp(clampX)\n\n        const paths = this.createPaths({\n            data: mappedData,\n            x,\n            y,\n        })\n\n        const ticks = y.ticks(numberOfTicks)\n\n        const extraProps = {\n            x,\n            y,\n            data,\n            ticks,\n            width,\n            height,\n            ...paths,\n        }\n\n        return (\n            <View style={style}>\n                <View style={{ flex: 1 }} onLayout={(event) => this._onLayout(event)}>\n                    {height > 0 && width > 0 && (\n                        <Svg style={{ height, width }}>\n                            {React.Children.map(children, (child) => {\n                                if (child && child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                            {paths.path.map((path, index) => {\n                                const { svg: pathSvg } = data[index]\n                                return (\n                                    <Path\n                                        key={path}\n                                        fill={'none'}\n                                        {...svg}\n                                        {...pathSvg}\n                                        d={path}\n                                        animate={animate}\n                                        animationDuration={animationDuration}\n                                    />\n                                )\n                            })}\n                            {React.Children.map(children, (child) => {\n                                if (child && !child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                        </Svg>\n                    )}\n                </View>\n            </View>\n        )\n    }\n}\n\nChartGrouped.propTypes = {\n    ...Chart.propTypes,\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            data: PropTypes.oneOfType([\n                PropTypes.arrayOf(PropTypes.object),\n                PropTypes.arrayOf(PropTypes.number),\n                PropTypes.arrayOf(PropTypes.array),\n            ]),\n            svg: PropTypes.object,\n        })\n    ).isRequired,\n}\n\nChartGrouped.defaultProps = {\n    ...Chart.defaultProps,\n}\n\nexport default ChartGrouped\n"]},"metadata":{},"sourceType":"module"}