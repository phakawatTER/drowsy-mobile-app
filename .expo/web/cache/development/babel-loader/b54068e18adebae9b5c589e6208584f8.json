{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Hammer from 'hammerjs';\nimport { MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD, MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD } from \"./constants\";\nimport DraggingGestureHandler from \"./DraggingGestureHandler\";\nimport { isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from \"./utils\";\n\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return _objectSpread({}, super.getHammerConfig(), {\n      direction: this.getDirection()\n    });\n  }\n\n  getDirection() {\n    var config = this.getConfig();\n    var {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist\n    } = config;\n    var directions = [];\n    var horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart)) horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    if (!isnan(activeOffsetXEnd)) horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    if (horizontalDirections.length === 2) horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n    directions = directions.concat(horizontalDirections);\n    var verticalDirections = [];\n    if (!isnan(activeOffsetYStart)) verticalDirections.push(Hammer.DIRECTION_UP);\n    if (!isnan(activeOffsetYEnd)) verticalDirections.push(Hammer.DIRECTION_DOWN);\n    if (verticalDirections.length === 2) verticalDirections = [Hammer.DIRECTION_VERTICAL];\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n\n    if (directions[0] === Hammer.DIRECTION_HORIZONTAL && directions[1] === Hammer.DIRECTION_VERTICAL) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this._hasCustomActivationCriteria) {\n      return {\n        minDistSq: 10\n      };\n    }\n\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria(_ref, criteria) {\n    var {\n      deltaX,\n      deltaY\n    } = _ref;\n    return !isnan(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !isnan(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n  }\n\n  shouldActivateUnderCustomCriteria(_ref2, criteria) {\n    var {\n      deltaX,\n      deltaY,\n      velocity\n    } = _ref2;\n    return !isnan(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !isnan(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !isnan(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !isnan(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n      x: deltaX,\n      y: deltaY\n    }), criteria.minDistSq) || TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) || TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq);\n  }\n\n  shouldMultiFingerPanFail(_ref3) {\n    var {\n      pointerLength,\n      scale,\n      deltaRotation\n    } = _ref3;\n\n    if (pointerLength <= 1) {\n      return false;\n    }\n\n    var deltaScale = Math.abs(scale - 1);\n    var absDeltaRotation = Math.abs(deltaRotation);\n\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      return true;\n    }\n\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(criteria) {\n    return !isnan(criteria.minDistSq) || !isnan(criteria.minVelocityX) || !isnan(criteria.minVelocityY) || !isnan(criteria.minVelocitySq) || !isnan(criteria.activeOffsetXStart) || !isnan(criteria.activeOffsetXEnd) || !isnan(criteria.activeOffsetYStart) || !isnan(criteria.activeOffsetYEnd);\n  }\n\n  isGestureEnabledForEvent(props, recognizer, inputData) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return {\n        failed: true\n      };\n    }\n\n    var velocity = {\n      x: inputData.velocityX,\n      y: inputData.velocityY\n    };\n\n    if (this._hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n      deltaX: inputData.deltaX,\n      deltaY: inputData.deltaY,\n      velocity\n    }, props)) {\n      if (this.shouldMultiFingerPanFail({\n        pointerLength: inputData.maxPointers,\n        scale: inputData.scale,\n        deltaRotation: inputData.deltaRotation\n      })) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: true\n      };\n    }\n\n    return {\n      success: false\n    };\n  }\n\n}\n\nfunction validateConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var isNum = v => isnan(v) || typeof v === 'number';\n\n  var isBool = v => typeof v === 'boolean';\n\n  var valid = {\n    enabled: isBool,\n    minDistSq: isNum,\n    minVelocityX: isNum,\n    minVelocityY: isNum,\n    minVelocity: isNum,\n    minVelocitySq: isNum,\n    activeOffsetXStart: isNum,\n    activeOffsetXEnd: isNum,\n    failOffsetXStart: isNum,\n    failOffsetXEnd: isNum,\n    activeOffsetYStart: isNum,\n    activeOffsetYEnd: isNum,\n    failOffsetYStart: isNum,\n    failOffsetYEnd: isNum,\n    hasCustomActivationCriteria: isBool,\n    minPointers: isNum,\n    maxPointers: isNum\n  };\n  var keys = Object.keys(valid);\n  var invalidKeys = [];\n\n  for (var key of Object.keys(config)) {\n    if (keys.includes(key)) {\n      if (valid[key](config[key])) {\n        console.warn('Invalid type: ' + key + ': ' + config[key]);\n      }\n    } else {\n      invalidKeys.push(key);\n    }\n  }\n\n  if (invalidKeys.length) {\n    throw new Error('Invalid config props found: ' + invalidKeys.join(', '));\n  }\n\n  return config;\n}\n\nexport default PanGestureHandler;","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-gesture-handler/web/PanGestureHandler.js"],"names":["Hammer","MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD","MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD","DraggingGestureHandler","isnan","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","PanGestureHandler","name","NativeGestureClass","Pan","getHammerConfig","direction","getDirection","config","getConfig","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","minDist","directions","horizontalDirections","DIRECTION_ALL","push","DIRECTION_LEFT","DIRECTION_RIGHT","length","DIRECTION_HORIZONTAL","concat","verticalDirections","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_VERTICAL","DIRECTION_NONE","_hasCustomActivationCriteria","minDistSq","shouldFailUnderCustomCriteria","criteria","deltaX","deltaY","failOffsetXStart","failOffsetXEnd","failOffsetYStart","failOffsetYEnd","shouldActivateUnderCustomCriteria","velocity","x","y","minVelocityX","minVelocityY","minVelocitySq","shouldMultiFingerPanFail","pointerLength","scale","deltaRotation","deltaScale","Math","abs","absDeltaRotation","updateHasCustomActivationCriteria","isGestureEnabledForEvent","props","recognizer","inputData","failed","velocityX","velocityY","maxPointers","success","validateConfig","isNum","v","isBool","valid","enabled","minVelocity","hasCustomActivationCriteria","minPointers","keys","Object","invalidKeys","key","includes","console","warn","Error","join"],"mappings":"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","sourcesContent":["import Hammer from 'hammerjs';\n\nimport {\n  MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD,\n  MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD,\n} from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      direction: this.getDirection(),\n    };\n  }\n\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist,\n    } = config;\n    let directions = [];\n    let horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart)) horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    if (!isnan(activeOffsetXEnd)) horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    if (horizontalDirections.length === 2) horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n\n    if (!isnan(activeOffsetYStart)) verticalDirections.push(Hammer.DIRECTION_UP);\n    if (!isnan(activeOffsetYEnd)) verticalDirections.push(Hammer.DIRECTION_DOWN);\n\n    if (verticalDirections.length === 2) verticalDirections = [Hammer.DIRECTION_VERTICAL];\n\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n    if (\n      directions[0] === Hammer.DIRECTION_HORIZONTAL &&\n      directions[1] === Hammer.DIRECTION_VERTICAL\n    ) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this._hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria({ deltaX, deltaY }, criteria) {\n    return (\n      (!isnan(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart) ||\n      (!isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd) ||\n      (!isnan(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart) ||\n      (!isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd)\n    );\n  }\n\n  shouldActivateUnderCustomCriteria({ deltaX, deltaY, velocity }, criteria) {\n    return (\n      (!isnan(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart) ||\n      (!isnan(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd) ||\n      (!isnan(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart) ||\n      (!isnan(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: deltaX, y: deltaY }), criteria.minDistSq) ||\n      TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) ||\n      TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq)\n    );\n  }\n\n  shouldMultiFingerPanFail({ pointerLength, scale, deltaRotation }) {\n    if (pointerLength <= 1) {\n      return false;\n    }\n\n    // Test if the pan had too much pinching or rotating.\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(criteria) {\n    return (\n      !isnan(criteria.minDistSq) ||\n      !isnan(criteria.minVelocityX) ||\n      !isnan(criteria.minVelocityY) ||\n      !isnan(criteria.minVelocitySq) ||\n      !isnan(criteria.activeOffsetXStart) ||\n      !isnan(criteria.activeOffsetXEnd) ||\n      !isnan(criteria.activeOffsetYStart) ||\n      !isnan(criteria.activeOffsetYEnd)\n    );\n  }\n\n  isGestureEnabledForEvent(props, recognizer, inputData) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return { failed: true };\n    }\n\n    const velocity = { x: inputData.velocityX, y: inputData.velocityY };\n    if (\n      this._hasCustomActivationCriteria &&\n      this.shouldActivateUnderCustomCriteria(\n        { deltaX: inputData.deltaX, deltaY: inputData.deltaY, velocity },\n        props\n      )\n    ) {\n      if (\n        this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation,\n        })\n      ) {\n        return {\n          failed: true,\n        };\n      }\n      return { success: true };\n    }\n    return { success: false };\n  }\n}\n\nfunction validateConfig(config = {}) {\n  const isNum = v => isnan(v) || typeof v === 'number';\n  const isBool = v => typeof v === 'boolean';\n\n  const valid = {\n    enabled: isBool,\n    minDistSq: isNum,\n    minVelocityX: isNum,\n    minVelocityY: isNum,\n    // TODO: Bacon: remove `minVelocity`\n    minVelocity: isNum,\n    minVelocitySq: isNum,\n    activeOffsetXStart: isNum,\n    activeOffsetXEnd: isNum,\n    failOffsetXStart: isNum,\n    failOffsetXEnd: isNum,\n    activeOffsetYStart: isNum,\n    activeOffsetYEnd: isNum,\n    failOffsetYStart: isNum,\n    failOffsetYEnd: isNum,\n    hasCustomActivationCriteria: isBool,\n    minPointers: isNum,\n    maxPointers: isNum,\n  };\n  const keys = Object.keys(valid);\n\n  let invalidKeys = [];\n  for (const key of Object.keys(config)) {\n    if (keys.includes(key)) {\n      if (valid[key](config[key])) {\n        console.warn('Invalid type: ' + key + ': ' + config[key]);\n      }\n    } else {\n      invalidKeys.push(key);\n    }\n  }\n\n  if (invalidKeys.length) {\n    throw new Error('Invalid config props found: ' + invalidKeys.join(', '));\n  }\n  return config;\n}\n\nexport default PanGestureHandler;\n"]},"metadata":{},"sourceType":"module"}