{"ast":null,"code":"var _jsxFileName = \"/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-svg-charts/src/stacked-area-chart.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport PropTypes from 'prop-types';\nimport * as array from 'd3-array';\nimport * as scale from 'd3-scale';\nimport * as shape from 'd3-shape';\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Svg } from 'react-native-svg';\nimport Path from \"./animated-path\";\n\nclass AreaStack extends PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      height: 0,\n      width: 0\n    };\n  }\n\n  static extractDataPoints(data, keys) {\n    var order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : shape.stackOrderNone;\n    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : shape.stackOffsetNone;\n    var series = shape.stack().keys(keys).order(order).offset(offset)(data);\n    return array.merge(array.merge(series));\n  }\n\n  _onLayout(event) {\n    var {\n      nativeEvent: {\n        layout: {\n          height,\n          width\n        }\n      }\n    } = event;\n    this.setState({\n      height,\n      width\n    });\n  }\n\n  render() {\n    var {\n      data,\n      keys,\n      colors,\n      animate,\n      animationDuration,\n      style,\n      curve,\n      numberOfTicks,\n      contentInset: {\n        top = 0,\n        bottom = 0,\n        left = 0,\n        right = 0\n      },\n      gridMin,\n      gridMax,\n      children,\n      offset,\n      order,\n      svgs,\n      xAccessor,\n      xScale,\n      clampY,\n      clampX\n    } = this.props;\n    var {\n      height,\n      width\n    } = this.state;\n\n    if (data.length === 0) {\n      return React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        }\n      });\n    }\n\n    var series = shape.stack().keys(keys).order(order).offset(offset)(data);\n    var yValues = array.merge(array.merge(series));\n    var xValues = data.map((item, index) => xAccessor({\n      item,\n      index\n    }));\n    var yExtent = array.extent([...yValues, gridMin, gridMax]);\n    var xExtent = array.extent(xValues);\n    var {\n      yMin = yExtent[0],\n      yMax = yExtent[1],\n      xMin = xExtent[0],\n      xMax = xExtent[1]\n    } = this.props;\n    var y = scale.scaleLinear().domain([yMin, yMax]).range([height - bottom, top]).clamp(clampY);\n    var x = xScale().domain([xMin, xMax]).range([left, width - right]).clamp(clampX);\n    var ticks = y.ticks(numberOfTicks);\n    var areas = series.map((serie, index) => {\n      var path = shape.area().x((d, index) => x(xAccessor({\n        item: d.data,\n        index\n      }))).y0(d => y(d[0])).y1(d => y(d[1])).curve(curve)(data.map((_, index) => serie[index]));\n      return {\n        path,\n        key: keys[index],\n        color: colors[index]\n      };\n    });\n    var extraProps = {\n      x,\n      y,\n      width,\n      height,\n      ticks,\n      areas\n    };\n    return React.createElement(View, {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      }\n    }, React.createElement(View, {\n      style: {\n        flex: 1\n      },\n      onLayout: event => this._onLayout(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      }\n    }, height > 0 && width > 0 && React.createElement(Svg, {\n      style: {\n        height,\n        width\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      }\n    }, React.Children.map(children, child => {\n      if (child && child.props.belowChart) {\n        return React.cloneElement(child, extraProps);\n      }\n\n      return null;\n    }), areas.map((area, index) => React.createElement(Path, _extends({\n      key: area.key,\n      fill: area.color\n    }, svgs[index], {\n      animate: animate,\n      animationDuration: animationDuration,\n      d: area.path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      }\n    }))), React.Children.map(children, child => {\n      if (child && !child.props.belowChart) {\n        return React.cloneElement(child, extraProps);\n      }\n\n      return null;\n    }))));\n  }\n\n}\n\nAreaStack.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n  svgs: PropTypes.arrayOf(PropTypes.object),\n  offset: PropTypes.func,\n  order: PropTypes.func,\n  style: PropTypes.any,\n  animate: PropTypes.bool,\n  animationDuration: PropTypes.number,\n  contentInset: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n    right: PropTypes.number,\n    bottom: PropTypes.number\n  }),\n  numberOfTicks: PropTypes.number,\n  showGrid: PropTypes.bool,\n  xScale: PropTypes.func,\n  xAccessor: PropTypes.func,\n  yMin: PropTypes.any,\n  yMax: PropTypes.any,\n  xMin: PropTypes.any,\n  xMax: PropTypes.any,\n  clampX: PropTypes.bool,\n  clampY: PropTypes.bool\n};\nAreaStack.defaultProps = {\n  curve: shape.curveLinear,\n  offset: shape.stackOffsetNone,\n  order: shape.stackOrderNone,\n  svgs: [],\n  strokeWidth: 2,\n  contentInset: {},\n  numberOfTicks: 10,\n  showGrid: true,\n  xScale: scale.scaleLinear,\n  xAccessor: (_ref) => {\n    var {\n      index\n    } = _ref;\n    return index;\n  }\n};\nexport default AreaStack;","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-svg-charts/src/stacked-area-chart.js"],"names":["PropTypes","array","scale","shape","React","PureComponent","Svg","Path","AreaStack","state","height","width","extractDataPoints","data","keys","order","stackOrderNone","offset","stackOffsetNone","series","stack","merge","_onLayout","event","nativeEvent","layout","setState","render","colors","animate","animationDuration","style","curve","numberOfTicks","contentInset","top","bottom","left","right","gridMin","gridMax","children","svgs","xAccessor","xScale","clampY","clampX","props","length","yValues","xValues","map","item","index","yExtent","extent","xExtent","yMin","yMax","xMin","xMax","y","scaleLinear","domain","range","clamp","x","ticks","areas","serie","path","area","d","y0","y1","_","key","color","extraProps","flex","Children","child","belowChart","cloneElement","propTypes","arrayOf","object","isRequired","string","func","any","bool","number","showGrid","defaultProps","curveLinear","strokeWidth"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport * as array from 'd3-array'\nimport * as scale from 'd3-scale'\nimport * as shape from 'd3-shape'\nimport React, { PureComponent } from 'react'\nimport { View } from 'react-native'\nimport { Svg } from 'react-native-svg'\nimport Path from './animated-path'\n\nclass AreaStack extends PureComponent {\n    static extractDataPoints(data, keys, order = shape.stackOrderNone, offset = shape.stackOffsetNone) {\n        const series = shape\n            .stack()\n            .keys(keys)\n            .order(order)\n            .offset(offset)(data)\n\n        //double merge arrays to extract just the values\n        return array.merge(array.merge(series))\n    }\n\n    state = {\n        height: 0,\n        width: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { height, width },\n            },\n        } = event\n        this.setState({ height, width })\n    }\n\n    render() {\n        const {\n            data,\n            keys,\n            colors,\n            animate,\n            animationDuration,\n            style,\n            curve,\n            numberOfTicks,\n            contentInset: { top = 0, bottom = 0, left = 0, right = 0 },\n            gridMin,\n            gridMax,\n            children,\n            offset,\n            order,\n            svgs,\n            xAccessor,\n            xScale,\n            clampY,\n            clampX,\n        } = this.props\n\n        const { height, width } = this.state\n\n        if (data.length === 0) {\n            return <View style={style} />\n        }\n\n        const series = shape\n            .stack()\n            .keys(keys)\n            .order(order)\n            .offset(offset)(data)\n\n        //double merge arrays to extract just the yValues\n        const yValues = array.merge(array.merge(series))\n        const xValues = data.map((item, index) => xAccessor({ item, index }))\n\n        const yExtent = array.extent([...yValues, gridMin, gridMax])\n        const xExtent = array.extent(xValues)\n\n        const { yMin = yExtent[0], yMax = yExtent[1], xMin = xExtent[0], xMax = xExtent[1] } = this.props\n\n        //invert range to support svg coordinate system\n        const y = scale\n            .scaleLinear()\n            .domain([yMin, yMax])\n            .range([height - bottom, top])\n            .clamp(clampY)\n\n        const x = xScale()\n            .domain([xMin, xMax])\n            .range([left, width - right])\n            .clamp(clampX)\n\n        const ticks = y.ticks(numberOfTicks)\n\n        const areas = series.map((serie, index) => {\n            const path = shape\n                .area()\n                .x((d, index) => x(xAccessor({ item: d.data, index })))\n                .y0((d) => y(d[0]))\n                .y1((d) => y(d[1]))\n                .curve(curve)(data.map((_, index) => serie[index]))\n\n            return {\n                path,\n                key: keys[index],\n                color: colors[index],\n            }\n        })\n\n        const extraProps = {\n            x,\n            y,\n            width,\n            height,\n            ticks,\n            areas,\n        }\n\n        return (\n            <View style={style}>\n                <View style={{ flex: 1 }} onLayout={(event) => this._onLayout(event)}>\n                    {height > 0 && width > 0 && (\n                        <Svg style={{ height, width }}>\n                            {React.Children.map(children, (child) => {\n                                if (child && child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                            {areas.map((area, index) => (\n                                <Path\n                                    key={area.key}\n                                    fill={area.color}\n                                    {...svgs[index]}\n                                    animate={animate}\n                                    animationDuration={animationDuration}\n                                    d={area.path}\n                                />\n                            ))}\n                            {React.Children.map(children, (child) => {\n                                if (child && !child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                        </Svg>\n                    )}\n                </View>\n            </View>\n        )\n    }\n}\n\nAreaStack.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n    colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n    svgs: PropTypes.arrayOf(PropTypes.object),\n    offset: PropTypes.func,\n    order: PropTypes.func,\n    style: PropTypes.any,\n    animate: PropTypes.bool,\n    animationDuration: PropTypes.number,\n    contentInset: PropTypes.shape({\n        top: PropTypes.number,\n        left: PropTypes.number,\n        right: PropTypes.number,\n        bottom: PropTypes.number,\n    }),\n    numberOfTicks: PropTypes.number,\n    showGrid: PropTypes.bool,\n    xScale: PropTypes.func,\n    xAccessor: PropTypes.func,\n\n    yMin: PropTypes.any,\n    yMax: PropTypes.any,\n    xMin: PropTypes.any,\n    xMax: PropTypes.any,\n    clampX: PropTypes.bool,\n    clampY: PropTypes.bool,\n}\n\nAreaStack.defaultProps = {\n    curve: shape.curveLinear,\n    offset: shape.stackOffsetNone,\n    order: shape.stackOrderNone,\n    svgs: [],\n    strokeWidth: 2,\n    contentInset: {},\n    numberOfTicks: 10,\n    showGrid: true,\n    xScale: scale.scaleLinear,\n    xAccessor: ({ index }) => index,\n}\n\nexport default AreaStack\n"]},"metadata":{},"sourceType":"module"}