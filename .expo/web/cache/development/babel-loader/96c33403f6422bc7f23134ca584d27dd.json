{"ast":null,"code":"var _jsxFileName = \"/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-loading-spinner-overlay/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nvar transparent = 'transparent';\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: transparent,\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  },\n  background: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  textContainer: {\n    flex: 1,\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'absolute'\n  },\n  textContent: {\n    top: 80,\n    height: 50,\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  activityIndicator: {\n    flex: 1\n  }\n});\nvar ANIMATION = ['none', 'slide', 'fade'];\nvar SIZES = ['small', 'normal', 'large'];\nexport default class Spinner extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: this.props.visible,\n      textContent: this.props.textContent\n    };\n  }\n\n  close() {\n    this.setState({\n      visible: false\n    });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    var newState = {};\n    if (state.visible !== props.visible) newState.visible = props.visible;\n    if (state.textContent !== props.textContent) newState.textContent = props.textContent;\n    return newState;\n  }\n\n  _handleOnRequestClose() {\n    if (this.props.cancelable) {\n      this.close();\n    }\n  }\n\n  _renderDefaultContent() {\n    return React.createElement(View, {\n      style: styles.background,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      }\n    }, this.props.customIndicator ? this.props.customIndicator : React.createElement(ActivityIndicator, {\n      color: this.props.color,\n      size: this.props.size,\n      style: [styles.activityIndicator, _objectSpread({}, this.props.indicatorStyle)],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      }\n    }), React.createElement(View, {\n      style: [styles.textContainer, _objectSpread({}, this.props.indicatorStyle)],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      }\n    }, React.createElement(Text, {\n      style: [styles.textContent, this.props.textStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      }\n    }, this.state.textContent)));\n  }\n\n  _renderSpinner() {\n    if (!this.state.visible) return null;\n    var spinner = React.createElement(View, {\n      style: [styles.container, {\n        backgroundColor: this.props.overlayColor\n      }],\n      key: \"spinner_\".concat(Date.now()),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      }\n    }, this.props.children ? this.props.children : this._renderDefaultContent());\n    return React.createElement(Modal, {\n      animationType: this.props.animation,\n      onRequestClose: () => this._handleOnRequestClose(),\n      supportedOrientations: ['landscape', 'portrait'],\n      transparent: true,\n      visible: this.state.visible,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      }\n    }, spinner);\n  }\n\n  render() {\n    return this._renderSpinner();\n  }\n\n}\nSpinner.propTypes = {\n  cancelable: PropTypes.bool,\n  color: PropTypes.string,\n  animation: PropTypes.oneOf(ANIMATION),\n  overlayColor: PropTypes.string,\n  size: PropTypes.oneOf(SIZES),\n  textContent: PropTypes.string,\n  textStyle: PropTypes.object,\n  visible: PropTypes.bool,\n  indicatorStyle: PropTypes.object,\n  customIndicator: PropTypes.element,\n  children: PropTypes.element\n};\nSpinner.defaultProps = {\n  visible: false,\n  cancelable: false,\n  textContent: '',\n  animation: 'none',\n  color: 'white',\n  size: 'large',\n  overlayColor: 'rgba(0, 0, 0, 0.25)'\n};","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-loading-spinner-overlay/index.js"],"names":["React","PropTypes","transparent","styles","StyleSheet","create","container","flex","backgroundColor","position","top","bottom","left","right","background","justifyContent","alignItems","textContainer","textContent","height","fontSize","fontWeight","activityIndicator","ANIMATION","SIZES","Spinner","PureComponent","constructor","props","state","visible","close","setState","getDerivedStateFromProps","newState","_handleOnRequestClose","cancelable","_renderDefaultContent","customIndicator","color","size","indicatorStyle","textStyle","_renderSpinner","spinner","overlayColor","Date","now","children","animation","render","propTypes","bool","string","oneOf","object","element","defaultProps"],"mappings":"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","sourcesContent":["//     react-native-loading-spinner-overlay\n//     Copyright (c) 2016- Nick Baugh <niftylettuce@gmail.com>\n//     MIT Licensed\n\n// * Author: [@niftylettuce](https://twitter.com/#!/niftylettuce)\n// * Source:\n// <https://github.com/niftylettuce/react-native-loading-spinner-overlay>\n\n// # react-native-loading-spinner-overlay\n//\n// <https://github.com/facebook/react-native/issues/2501>\n// <https://rnplay.org/apps/1YkBCQ>\n// <https://github.com/facebook/react-native/issues/2501>\n// <https://github.com/brentvatne/react-native-overlay>\n//\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, View, Text, Modal, ActivityIndicator } from 'react-native';\n\nconst transparent = 'transparent';\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: transparent,\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  },\n  background: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  textContainer: {\n    flex: 1,\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'absolute'\n  },\n  textContent: {\n    top: 80,\n    height: 50,\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  activityIndicator: {\n    flex: 1\n  }\n});\n\nconst ANIMATION = ['none', 'slide', 'fade'];\nconst SIZES = ['small', 'normal', 'large'];\n\nexport default class Spinner extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: this.props.visible,\n      textContent: this.props.textContent\n    };\n  }\n\n  static propTypes = {\n    cancelable: PropTypes.bool,\n    color: PropTypes.string,\n    animation: PropTypes.oneOf(ANIMATION),\n    overlayColor: PropTypes.string,\n    size: PropTypes.oneOf(SIZES),\n    textContent: PropTypes.string,\n    textStyle: PropTypes.object,\n    visible: PropTypes.bool,\n    indicatorStyle: PropTypes.object,\n    customIndicator: PropTypes.element,\n    children: PropTypes.element\n  };\n\n  static defaultProps = {\n    visible: false,\n    cancelable: false,\n    textContent: '',\n    animation: 'none',\n    color: 'white',\n    size: 'large', // 'normal',\n    overlayColor: 'rgba(0, 0, 0, 0.25)'\n  };\n\n  close() {\n    this.setState({ visible: false });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const newState = {};\n    if (state.visible !== props.visible) newState.visible = props.visible;\n    if (state.textContent !== props.textContent)\n      newState.textContent = props.textContent;\n    return newState;\n  }\n\n  _handleOnRequestClose() {\n    if (this.props.cancelable) {\n      this.close();\n    }\n  }\n\n  _renderDefaultContent() {\n    return (\n      <View style={styles.background}>\n        {this.props.customIndicator ? (\n          this.props.customIndicator\n        ) : (\n          <ActivityIndicator\n            color={this.props.color}\n            size={this.props.size}\n            style={[styles.activityIndicator, { ...this.props.indicatorStyle }]}\n          />\n        )}\n        <View style={[styles.textContainer, { ...this.props.indicatorStyle }]}>\n          <Text style={[styles.textContent, this.props.textStyle]}>\n            {this.state.textContent}\n          </Text>\n        </View>\n      </View>\n    );\n  }\n\n  _renderSpinner() {\n    if (!this.state.visible) return null;\n\n    const spinner = (\n      <View\n        style={[styles.container, { backgroundColor: this.props.overlayColor }]}\n        key={`spinner_${Date.now()}`}\n      >\n        {this.props.children\n          ? this.props.children\n          : this._renderDefaultContent()}\n      </View>\n    );\n\n    return (\n      <Modal\n        animationType={this.props.animation}\n        onRequestClose={() => this._handleOnRequestClose()}\n        supportedOrientations={['landscape', 'portrait']}\n        transparent\n        visible={this.state.visible}\n      >\n        {spinner}\n      </Modal>\n    );\n  }\n\n  render() {\n    return this._renderSpinner();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}