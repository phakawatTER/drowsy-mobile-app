{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Hammer from 'hammerjs';\nimport State from \"../State\";\nimport { CONTENT_TOUCHES_DELAY, CONTENT_TOUCHES_QUICK_TAP_END_DELAY } from \"./constants\";\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { fireAfterInterval, isnan } from \"./utils\";\n\nclass PressGestureHandler extends DiscreteGestureHandler {\n  constructor() {\n    super(...arguments);\n    this.shouldDelayTouches = true;\n  }\n\n  get name() {\n    return 'press';\n  }\n\n  get minDurationMs() {\n    return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Press;\n  }\n\n  simulateCancelEvent(inputData) {\n    this.hasGestureFailed = true;\n    this.cancelEvent(inputData);\n  }\n\n  updateHasCustomActivationCriteria(_ref) {\n    var {\n      shouldCancelWhenOutside,\n      maxDistSq\n    } = _ref;\n    return shouldCancelWhenOutside || !isnan(maxDistSq);\n  }\n\n  getState(type) {\n    return {\n      [Hammer.INPUT_START]: State.BEGAN,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.CANCELLED\n    }[type];\n  }\n\n  getConfig() {\n    if (!this._hasCustomActivationCriteria) {\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10\n      };\n    }\n\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return _objectSpread({}, super.getHammerConfig(), {\n      time: this.minDurationMs\n    });\n  }\n\n  onGestureActivated(ev) {\n    this.onGestureStart(ev);\n  }\n\n  shouldDelayTouchForEvent(_ref2) {\n    var {\n      pointerType\n    } = _ref2;\n    return this.shouldDelayTouches && pointerType === 'touch';\n  }\n\n  onGestureStart(ev) {\n    this.isGestureRunning = true;\n    clearTimeout(this.visualFeedbackTimer);\n    this.initialEvent = ev;\n    this.visualFeedbackTimer = fireAfterInterval(() => {\n      this.sendGestureStartedEvent(this.initialEvent);\n      this.initialEvent = null;\n    }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n  }\n\n  sendGestureStartedEvent(ev) {\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.sendEvent(_objectSpread({}, ev, {\n      eventType: Hammer.INPUT_MOVE,\n      isFirst: true\n    }));\n  }\n\n  forceInvalidate(event) {\n    super.forceInvalidate(event);\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.initialEvent = null;\n  }\n\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n\n    if (ev.isFinal && this.isGestureRunning) {\n      var timeout;\n\n      if (this.visualFeedbackTimer) {\n        timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n        this.sendGestureStartedEvent(this.initialEvent);\n        this.initialEvent = null;\n      }\n\n      fireAfterInterval(() => {\n        this.sendEvent(_objectSpread({}, ev, {\n          eventType: Hammer.INPUT_END,\n          isFinal: true\n        }));\n        this.onGestureEnded();\n      }, timeout);\n    }\n  }\n\n  updateGestureConfig(_ref3) {\n    var {\n      shouldActivateOnStart = false,\n      disallowInterruption = false,\n      shouldCancelWhenOutside = true,\n      minDurationMs = Number.NaN,\n      maxDist = Number.NaN,\n      minPointers = 1,\n      maxPointers = 1\n    } = _ref3,\n        props = _objectWithoutProperties(_ref3, [\"shouldActivateOnStart\", \"disallowInterruption\", \"shouldCancelWhenOutside\", \"minDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"]);\n\n    return super.updateGestureConfig(_objectSpread({\n      shouldActivateOnStart,\n      disallowInterruption,\n      shouldCancelWhenOutside,\n      minDurationMs,\n      maxDist,\n      minPointers,\n      maxPointers\n    }, props));\n  }\n\n}\n\nexport default PressGestureHandler;","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-gesture-handler/web/PressGestureHandler.js"],"names":["Hammer","State","CONTENT_TOUCHES_DELAY","CONTENT_TOUCHES_QUICK_TAP_END_DELAY","DiscreteGestureHandler","fireAfterInterval","isnan","PressGestureHandler","shouldDelayTouches","name","minDurationMs","config","maxDist","NativeGestureClass","Press","simulateCancelEvent","inputData","hasGestureFailed","cancelEvent","updateHasCustomActivationCriteria","shouldCancelWhenOutside","maxDistSq","getState","type","INPUT_START","BEGAN","INPUT_MOVE","ACTIVE","INPUT_END","END","INPUT_CANCEL","CANCELLED","getConfig","_hasCustomActivationCriteria","getHammerConfig","time","onGestureActivated","ev","onGestureStart","shouldDelayTouchForEvent","pointerType","isGestureRunning","clearTimeout","visualFeedbackTimer","initialEvent","sendGestureStartedEvent","sendEvent","eventType","isFirst","forceInvalidate","event","onRawEvent","isFinal","timeout","onGestureEnded","updateGestureConfig","shouldActivateOnStart","disallowInterruption","Number","NaN","minPointers","maxPointers","props"],"mappings":"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","sourcesContent":["import Hammer from 'hammerjs';\n\nimport State from '../State';\nimport { CONTENT_TOUCHES_DELAY, CONTENT_TOUCHES_QUICK_TAP_END_DELAY } from './constants';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { fireAfterInterval, isnan } from './utils';\n\nclass PressGestureHandler extends DiscreteGestureHandler {\n  get name() {\n    return 'press';\n  }\n\n  get minDurationMs() {\n    return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Press;\n  }\n\n  shouldDelayTouches = true;\n\n  simulateCancelEvent(inputData) {\n    // Long press never starts so we can't rely on the running event boolean.\n    this.hasGestureFailed = true;\n    this.cancelEvent(inputData);\n  }\n\n  updateHasCustomActivationCriteria({ shouldCancelWhenOutside, maxDistSq }) {\n    return shouldCancelWhenOutside || !isnan(maxDistSq);\n  }\n\n  getState(type) {\n    return {\n      [Hammer.INPUT_START]: State.BEGAN,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.CANCELLED,\n    }[type];\n  }\n\n  getConfig() {\n    if (!this._hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs,\n    };\n  }\n\n  onGestureActivated(ev) {\n    this.onGestureStart(ev);\n  }\n\n  shouldDelayTouchForEvent({ pointerType }) {\n    // Don't disable event for mouse input\n    return this.shouldDelayTouches && pointerType === 'touch';\n  }\n\n  onGestureStart(ev) {\n    this.isGestureRunning = true;\n    clearTimeout(this.visualFeedbackTimer);\n    this.initialEvent = ev;\n    this.visualFeedbackTimer = fireAfterInterval(() => {\n      this.sendGestureStartedEvent(this.initialEvent);\n      this.initialEvent = null;\n    }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n  }\n\n  sendGestureStartedEvent(ev) {\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.sendEvent({\n      ...ev,\n      eventType: Hammer.INPUT_MOVE,\n      isFirst: true,\n    });\n  }\n\n  forceInvalidate(event) {\n    super.forceInvalidate(event);\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.initialEvent = null;\n  }\n\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (ev.isFinal && this.isGestureRunning) {\n      let timeout;\n      if (this.visualFeedbackTimer) {\n        // Aesthetic timing for a quick tap.\n        // We haven't activated the tap right away to emulate iOS `delaysContentTouches`\n        // Now we must send the initial activation event and wait a set amount of time before firing the end event.\n        timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n        this.sendGestureStartedEvent(this.initialEvent);\n        this.initialEvent = null;\n      }\n      fireAfterInterval(() => {\n        this.sendEvent({\n          ...ev,\n          eventType: Hammer.INPUT_END,\n          isFinal: true,\n        });\n        this.onGestureEnded();\n      }, timeout);\n    }\n  }\n\n  updateGestureConfig({\n    shouldActivateOnStart = false,\n    disallowInterruption = false,\n    shouldCancelWhenOutside = true,\n    minDurationMs = Number.NaN,\n    maxDist = Number.NaN,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldActivateOnStart,\n      disallowInterruption,\n      shouldCancelWhenOutside,\n      minDurationMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n}\nexport default PressGestureHandler;\n"]},"metadata":{},"sourceType":"module"}