{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Hammer from 'hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport State from \"../State\";\nimport { EventMap } from \"./constants\";\nimport * as NodeManager from \"./NodeManager\";\nvar _gestureInstances = 0;\n\nclass GestureHandler {\n  get id() {\n    return \"\".concat(this.name).concat(this._gestureInstance);\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.view = null;\n    this.config = {};\n    this.hammer = null;\n    this.pendingGestures = {};\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n\n    this.clearSelfAsPending = () => {\n      if (Array.isArray(this.config.waitFor)) {\n        for (var gesture of this.config.waitFor) {\n          gesture.removePendingGesture(this.id);\n        }\n      }\n    };\n\n    this.destroy = () => {\n      this.clearSelfAsPending();\n\n      if (this.hammer) {\n        this.hammer.stop();\n        this.hammer.destroy();\n      }\n\n      this.hammer = null;\n    };\n\n    this.isPointInView = (_ref) => {\n      var {\n        x,\n        y\n      } = _ref;\n      var rect = this.view.getBoundingClientRect();\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n\n    this.sendEvent = nativeEvent => {\n      var {\n        onGestureHandlerStateChange: onHandlerStateChange,\n        onGestureHandlerEvent: onGestureEvent\n      } = this.ref.props;\n      var event = this.transformEventData(nativeEvent);\n\n      if (nativeEvent.isFinal) {\n        this.oldState = State.UNDETERMINED;\n        this.previousState = State.UNDETERMINED;\n      }\n\n      invokeNullableMethod('onGestureEvent', onGestureEvent, event);\n      invokeNullableMethod('onHandlerStateChange', onHandlerStateChange, event);\n    };\n\n    this.sync = () => {\n      var gesture = this.hammer.get(this.name);\n      if (!gesture) return;\n\n      var enable = (recognizer, inputData) => {\n        if (!this.config.enabled) {\n          this.isGestureRunning = false;\n          this.hasGestureFailed = false;\n          return false;\n        }\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return this.shouldEnableGestureOnSetup;\n        }\n\n        if (this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!this.isDiscrete) {\n          if (this.isGestureRunning) {\n            return true;\n          }\n\n          this._stillWaiting = this._getPendingGestures();\n\n          if (this._stillWaiting.length) {\n            for (var _gesture of this._stillWaiting) {\n              if (!_gesture.isDiscrete && _gesture.isGestureRunning) {\n                this.hasGestureFailed = true;\n                this.isGestureRunning = false;\n                return false;\n              }\n            }\n\n            return false;\n          }\n        }\n\n        if (!this._hasCustomActivationCriteria) {\n          return true;\n        }\n\n        var deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation;\n        var {\n          success,\n          failed\n        } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, _objectSpread({}, inputData, {\n          deltaRotation\n        }));\n\n        if (failed) {\n          this.simulateCancelEvent(inputData);\n          this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      var params = this.getHammerConfig();\n      gesture.set(_objectSpread({}, params, {\n        enable\n      }));\n    };\n\n    this._gestureInstance = _gestureInstances++;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(gesture) {}\n\n  removePendingGesture(id) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent() {\n    return {\n      success: true\n    };\n  }\n\n  parseNativeEvent(nativeEvent) {\n    return nativeEvent;\n  }\n\n  get NativeGestureClass() {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(config) {\n    return true;\n  }\n\n  updateGestureConfig(_ref2) {\n    var {\n      enabled = true\n    } = _ref2,\n        props = _objectWithoutProperties(_ref2, [\"enabled\"]);\n\n    this.clearSelfAsPending();\n    this.config = ensureConfig(_objectSpread({\n      enabled\n    }, props));\n    this._hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n    if (Array.isArray(this.config.waitFor)) {\n      for (var gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n\n    return this.config;\n  }\n\n  getState(type) {\n    return EventMap[type];\n  }\n\n  transformEventData(event) {\n    var {\n      eventType,\n      maxPointers: numberOfPointers\n    } = event;\n    var changedTouch = event.changedPointers[0];\n    var pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY\n    });\n    var state = this.getState(eventType);\n\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: _objectSpread({\n        numberOfPointers,\n        state,\n        pointerInside\n      }, this.transformNativeEvent(event), {\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState\n      }),\n      timeStamp: Date.now()\n    };\n  }\n\n  transformNativeEvent(event) {\n    return {};\n  }\n\n  cancelPendingGestures(event) {\n    for (var gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (var gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  onGestureEnded(event) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event) {\n    this.notifyPendingGestures();\n    this.sendEvent(_objectSpread({}, event, {\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true\n    }));\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent(_ref3) {\n    var {\n      isFirst\n    } = _ref3;\n\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.ref = ref;\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view);\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    var {\n      NativeGestureClass\n    } = this;\n    var gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n    this.hammer.on('hammer.input', ev => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev);\n\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n\n      if (ev.isFinal) {\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    if (!this.isDiscrete) {\n      this.hammer.on(\"\".concat(this.name, \"start\"), event => this.onStart(event));\n      this.hammer.on(\"\".concat(this.name, \"end \").concat(this.name, \"cancel\"), event => this.onGestureEnded(event));\n    }\n\n    this.hammer.on(this.name, ev => this.onGestureActivated(ev));\n  }\n\n  onStart(_ref4) {\n    var {\n      deltaX,\n      deltaY,\n      rotation\n    } = _ref4;\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      var stillWaiting = this.config.waitFor.filter((_ref5) => {\n        var {\n          hasGestureFailed\n        } = _ref5;\n        return hasGestureFailed === false;\n      });\n      return stillWaiting;\n    }\n\n    return [];\n  }\n\n  getHammerConfig() {\n    var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n    return {\n      pointers\n    };\n  }\n\n  simulateCancelEvent(inputData) {}\n\n}\n\nfunction invokeNullableMethod(name, method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n\n        invokeNullableMethod(name, handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var {\n            argMapping\n          } = method.__nodeConfig;\n\n          if (Array.isArray(argMapping)) {\n            for (var index in argMapping) {\n              var [key] = argMapping[index];\n\n              if (key in event.nativeEvent) {\n                method.__nodeConfig.argMapping[index] = [key, event.nativeEvent[key]];\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map((_ref6) => {\n      var {\n        _handlerTag\n      } = _ref6;\n      return NodeManager.getHandler(_handlerTag);\n    }).filter(v => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'].forEach(prop => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-gesture-handler/web/GestureHandler.js"],"names":["Hammer","State","EventMap","NodeManager","_gestureInstances","GestureHandler","id","name","_gestureInstance","isDiscrete","shouldEnableGestureOnSetup","Error","constructor","isGestureRunning","hasGestureFailed","view","config","hammer","pendingGestures","oldState","UNDETERMINED","previousState","clearSelfAsPending","Array","isArray","waitFor","gesture","removePendingGesture","destroy","stop","isPointInView","x","y","rect","getBoundingClientRect","pointerInside","left","right","top","bottom","sendEvent","nativeEvent","onGestureHandlerStateChange","onHandlerStateChange","onGestureHandlerEvent","onGestureEvent","ref","props","event","transformEventData","isFinal","invokeNullableMethod","sync","get","enable","recognizer","inputData","enabled","options","maxPointers","_stillWaiting","_getPendingGestures","length","_hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","success","failed","isGestureEnabledForEvent","getConfig","simulateCancelEvent","params","getHammerConfig","set","onWaitingEnded","addPendingGesture","parseNativeEvent","NativeGestureClass","updateHasCustomActivationCriteria","updateGestureConfig","ensureConfig","getState","type","eventType","numberOfPointers","changedTouch","changedPointers","clientX","clientY","state","transformNativeEvent","handlerTag","target","timeStamp","Date","now","cancelPendingGestures","Object","values","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","INPUT_CANCEL","onRawEvent","isFirst","setView","findNodeHandle","Manager","add","on","ev","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","pointers","minPointers","method","__getHandler","handler","argMapping","__nodeConfig","index","key","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","_handlerTag","getHandler","v","forEach","prop","Number","NaN","value"],"mappings":"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","sourcesContent":["import Hammer from 'hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport State from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\nlet _gestureInstances = 0;\n\nclass GestureHandler {\n  isGestureRunning = false;\n  hasGestureFailed = false;\n  view = null;\n  config = {};\n  hammer = null;\n  pendingGestures = {};\n  oldState = State.UNDETERMINED;\n  previousState = State.UNDETERMINED;\n\n  get id() {\n    return `${this.name}${this._gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this._gestureInstance = _gestureInstances++;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(gesture) {}\n\n  removePendingGesture(id) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent() {\n    return { success: true };\n  }\n\n  parseNativeEvent(nativeEvent) {\n    return nativeEvent;\n  }\n\n  get NativeGestureClass() {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this._hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop();\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }) => {\n    const rect = this.view.getBoundingClientRect();\n    const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type) {\n    return EventMap[type];\n  }\n\n  transformEventData(event) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({ x: changedTouch.clientX, y: changedTouch.clientY });\n\n    const state = this.getState(eventType);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(event) {\n    return {};\n  }\n\n  sendEvent = nativeEvent => {\n    const {\n      onGestureHandlerStateChange: onHandlerStateChange,\n      onGestureHandlerEvent: onGestureEvent,\n    } = this.ref.props;\n\n    const event = this.transformEventData(nativeEvent);\n\n    // Reset the state for the next gesture\n    if (nativeEvent.isFinal) {\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n    }\n\n    invokeNullableMethod('onGestureEvent', onGestureEvent, event);\n    invokeNullableMethod('onHandlerStateChange', onHandlerStateChange, event);\n  };\n\n  cancelPendingGestures(event) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  onGestureEnded(event) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n\n    const { NativeGestureClass } = this;\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', ev => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    if (!this.isDiscrete) {\n      this.hammer.on(`${this.name}start`, event => this.onStart(event));\n      this.hammer.on(`${this.name}end ${this.name}cancel`, event => this.onGestureEnded(event));\n    }\n    this.hammer.on(this.name, ev => this.onGestureActivated(ev));\n  }\n\n  onStart({ deltaX, deltaY, rotation }) {\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer, inputData) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this._hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation;\n      const { success, failed } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, {\n        ...inputData,\n        deltaRotation,\n      });\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(inputData) {}\n}\n\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(name, method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        const handler = method.__getHandler();\n        invokeNullableMethod(name, handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const index in argMapping) {\n              const [key] = argMapping[index];\n              if (key in event.nativeEvent) {\n                method.__nodeConfig.argMapping[index] = [key, event.nativeEvent[key]];\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config) {\n  const props = { ...config };\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ _handlerTag }) => NodeManager.getHandler(_handlerTag))\n      .filter(v => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ].forEach(prop => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"module"}