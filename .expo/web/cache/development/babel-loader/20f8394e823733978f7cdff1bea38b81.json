{"ast":null,"code":"var _jsxFileName = \"/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-svg-charts/src/x-axis.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as d3Scale from 'd3-scale';\nimport * as array from 'd3-array';\nimport Svg, { G, Text as SVGText } from 'react-native-svg';\n\nclass XAxis extends PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      width: 0,\n      height: 0\n    };\n  }\n\n  _onLayout(event) {\n    var {\n      nativeEvent: {\n        layout: {\n          width,\n          height\n        }\n      }\n    } = event;\n\n    if (width !== this.state.width) {\n      this.setState({\n        width,\n        height\n      });\n    }\n  }\n\n  _getX(domain) {\n    var {\n      scale,\n      spacingInner,\n      spacingOuter,\n      contentInset: {\n        left = 0,\n        right = 0\n      }\n    } = this.props;\n    var {\n      width\n    } = this.state;\n    var x = scale().domain(domain).range([left, width - right]);\n\n    if (scale === d3Scale.scaleBand) {\n      x.paddingInner([spacingInner]).paddingOuter([spacingOuter]);\n      return value => x(value) + x.bandwidth() / 2;\n    }\n\n    return x;\n  }\n\n  render() {\n    var {\n      style,\n      scale,\n      data,\n      xAccessor,\n      formatLabel,\n      numberOfTicks,\n      svg,\n      children,\n      min,\n      max\n    } = this.props;\n    var {\n      height,\n      width\n    } = this.state;\n\n    if (data.length === 0) {\n      return React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        }\n      });\n    }\n\n    var values = data.map((item, index) => xAccessor({\n      item,\n      index\n    }));\n    var extent = array.extent(values);\n    var domain = scale === d3Scale.scaleBand ? values : [min || extent[0], max || extent[1]];\n\n    var x = this._getX(domain);\n\n    var ticks = numberOfTicks ? x.ticks(numberOfTicks) : values;\n    var extraProps = {\n      x,\n      ticks,\n      width,\n      height,\n      formatLabel\n    };\n    return React.createElement(View, {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      }\n    }, React.createElement(View, {\n      style: {\n        flexGrow: 1\n      },\n      onLayout: event => this._onLayout(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      }\n    }, React.createElement(Text, {\n      style: {\n        opacity: 0,\n        fontSize: svg.fontSize\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      }\n    }, formatLabel(ticks[0], 0)), height > 0 && width > 0 && React.createElement(Svg, {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height,\n        width\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      }\n    }, React.createElement(G, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      }\n    }, React.Children.map(children, child => {\n      return React.cloneElement(child, extraProps);\n    }), width > 0 && ticks.map((value, index) => {\n      var {\n        svg: valueSvg = {}\n      } = data[index] || {};\n      return React.createElement(SVGText, _extends({\n        textAnchor: 'middle',\n        originX: x(value),\n        alignmentBaseline: 'hanging'\n      }, svg, valueSvg, {\n        key: index,\n        x: x(value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        }\n      }), formatLabel(value, index));\n    })))));\n  }\n\n}\n\nXAxis.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.object])).isRequired,\n  spacingInner: PropTypes.number,\n  spacingOuter: PropTypes.number,\n  formatLabel: PropTypes.func,\n  contentInset: PropTypes.shape({\n    left: PropTypes.number,\n    right: PropTypes.number\n  }),\n  scale: PropTypes.oneOf([d3Scale.scaleTime, d3Scale.scaleLinear, d3Scale.scaleBand]),\n  numberOfTicks: PropTypes.number,\n  xAccessor: PropTypes.func,\n  svg: PropTypes.object,\n  min: PropTypes.any,\n  max: PropTypes.any\n};\nXAxis.defaultProps = {\n  spacingInner: 0.05,\n  spacingOuter: 0.05,\n  contentInset: {},\n  svg: {},\n  xAccessor: (_ref) => {\n    var {\n      index\n    } = _ref;\n    return index;\n  },\n  scale: d3Scale.scaleLinear,\n  formatLabel: value => value\n};\nexport default XAxis;","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-svg-charts/src/x-axis.js"],"names":["React","PureComponent","PropTypes","d3Scale","array","Svg","G","Text","SVGText","XAxis","state","width","height","_onLayout","event","nativeEvent","layout","setState","_getX","domain","scale","spacingInner","spacingOuter","contentInset","left","right","props","x","range","scaleBand","paddingInner","paddingOuter","value","bandwidth","render","style","data","xAccessor","formatLabel","numberOfTicks","svg","children","min","max","length","values","map","item","index","extent","ticks","extraProps","flexGrow","opacity","fontSize","position","top","Children","child","cloneElement","valueSvg","propTypes","arrayOf","oneOfType","number","object","isRequired","func","shape","oneOf","scaleTime","scaleLinear","any","defaultProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text, View } from 'react-native'\nimport * as d3Scale from 'd3-scale'\nimport * as array from 'd3-array'\nimport Svg, { G, Text as SVGText } from 'react-native-svg'\n\nclass XAxis extends PureComponent {\n    state = {\n        width: 0,\n        height: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { width, height },\n            },\n        } = event\n\n        if (width !== this.state.width) {\n            this.setState({ width, height })\n        }\n    }\n\n    _getX(domain) {\n        const {\n            scale,\n            spacingInner,\n            spacingOuter,\n            contentInset: { left = 0, right = 0 },\n        } = this.props\n\n        const { width } = this.state\n\n        const x = scale()\n            .domain(domain)\n            .range([left, width - right])\n\n        if (scale === d3Scale.scaleBand) {\n            x.paddingInner([spacingInner]).paddingOuter([spacingOuter])\n\n            //add half a bar to center label\n            return (value) => x(value) + x.bandwidth() / 2\n        }\n\n        return x\n    }\n\n    render() {\n        const { style, scale, data, xAccessor, formatLabel, numberOfTicks, svg, children, min, max } = this.props\n\n        const { height, width } = this.state\n\n        if (data.length === 0) {\n            return <View style={style} />\n        }\n\n        const values = data.map((item, index) => xAccessor({ item, index }))\n        const extent = array.extent(values)\n        const domain = scale === d3Scale.scaleBand ? values : [min || extent[0], max || extent[1]]\n\n        const x = this._getX(domain)\n        const ticks = numberOfTicks ? x.ticks(numberOfTicks) : values\n\n        const extraProps = {\n            x,\n            ticks,\n            width,\n            height,\n            formatLabel,\n        }\n\n        return (\n            <View style={style}>\n                <View style={{ flexGrow: 1 }} onLayout={(event) => this._onLayout(event)}>\n                    {/*invisible text to allow for parent resizing*/}\n                    <Text style={{ opacity: 0, fontSize: svg.fontSize }}>{formatLabel(ticks[0], 0)}</Text>\n                    {height > 0 && width > 0 && (\n                        <Svg\n                            style={{\n                                position: 'absolute',\n                                top: 0,\n                                left: 0,\n                                height,\n                                width,\n                            }}\n                        >\n                            <G>\n                                {React.Children.map(children, (child) => {\n                                    return React.cloneElement(child, extraProps)\n                                })}\n                                {// don't render labels if width isn't measured yet,\n                                // causes rendering issues\n                                width > 0 &&\n                                    ticks.map((value, index) => {\n                                        const { svg: valueSvg = {} } = data[index] || {}\n\n                                        return (\n                                            <SVGText\n                                                textAnchor={'middle'}\n                                                originX={x(value)}\n                                                alignmentBaseline={'hanging'}\n                                                {...svg}\n                                                {...valueSvg}\n                                                key={index}\n                                                x={x(value)}\n                                            >\n                                                {formatLabel(value, index)}\n                                            </SVGText>\n                                        )\n                                    })}\n                            </G>\n                        </Svg>\n                    )}\n                </View>\n            </View>\n        )\n    }\n}\n\nXAxis.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.object])).isRequired,\n    spacingInner: PropTypes.number,\n    spacingOuter: PropTypes.number,\n    formatLabel: PropTypes.func,\n    contentInset: PropTypes.shape({\n        left: PropTypes.number,\n        right: PropTypes.number,\n    }),\n    scale: PropTypes.oneOf([d3Scale.scaleTime, d3Scale.scaleLinear, d3Scale.scaleBand]),\n    numberOfTicks: PropTypes.number,\n    xAccessor: PropTypes.func,\n    svg: PropTypes.object,\n    min: PropTypes.any,\n    max: PropTypes.any,\n}\n\nXAxis.defaultProps = {\n    spacingInner: 0.05,\n    spacingOuter: 0.05,\n    contentInset: {},\n    svg: {},\n    xAccessor: ({ index }) => index,\n    scale: d3Scale.scaleLinear,\n    formatLabel: (value) => value,\n}\n\nexport default XAxis\n"]},"metadata":{},"sourceType":"module"}