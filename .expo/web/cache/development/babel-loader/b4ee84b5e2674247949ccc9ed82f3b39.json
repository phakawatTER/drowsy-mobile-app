{"ast":null,"code":"var _jsxFileName = \"/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-svg-charts/src/animated-path.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport PropTypes from 'prop-types';\nimport { Path } from 'react-native-svg';\nimport * as interpolate from 'd3-interpolate-path';\n\nclass AnimatedPath extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      d: props.d\n    };\n  }\n\n  componentDidUpdate(props) {\n    var {\n      d: newD,\n      animate\n    } = this.props;\n    var {\n      d: oldD\n    } = props;\n    this.newD = newD;\n\n    if (newD === oldD) {\n      return;\n    }\n\n    if (!animate || newD === null || oldD === null) {\n      return;\n    }\n\n    this.newD = newD;\n    this.interpolator = interpolate.interpolatePath(oldD, newD);\n\n    this._animate();\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.animation);\n\n    this._clearInteraction();\n  }\n\n  _animate(start) {\n    cancelAnimationFrame(this.animation);\n    this.animation = requestAnimationFrame(timestamp => {\n      if (!start) {\n        this._clearInteraction();\n\n        this.handle = InteractionManager.createInteractionHandle();\n        start = timestamp;\n      }\n\n      var delta = (timestamp - start) / this.props.animationDuration;\n\n      if (delta > 1) {\n        this.component.setNativeProps({\n          d: this.newD\n        });\n\n        this._clearInteraction();\n\n        return;\n      }\n\n      var d = this.interpolator(delta);\n      this.component.setNativeProps({\n        d\n      });\n      this.setState(this.state, () => {\n        this._animate(start);\n      });\n    });\n  }\n\n  _clearInteraction() {\n    if (this.handle) {\n      InteractionManager.clearInteractionHandle(this.handle);\n      this.handle = null;\n    }\n  }\n\n  render() {\n    return React.createElement(Path, _extends({\n      ref: _ref => this.component = _ref\n    }, this.props, {\n      d: this.props.animate ? this.state.d : this.props.d,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      }\n    }));\n  }\n\n}\n\nAnimatedPath.propTypes = _objectSpread({\n  animate: PropTypes.bool,\n  animationDuration: PropTypes.number,\n  renderPlaceholder: PropTypes.func\n}, Path.propTypes);\nAnimatedPath.defaultProps = {\n  animate: false,\n  animationDuration: 300,\n  renderPlaceholder: () => null\n};\nexport default AnimatedPath;","map":{"version":3,"sources":["/Users/phakawat/Desktop/drowsy-mobile-app/node_modules/react-native-svg-charts/src/animated-path.js"],"names":["React","Component","PropTypes","Path","interpolate","AnimatedPath","constructor","props","state","d","componentDidUpdate","newD","animate","oldD","interpolator","interpolatePath","_animate","componentWillUnmount","cancelAnimationFrame","animation","_clearInteraction","start","requestAnimationFrame","timestamp","handle","InteractionManager","createInteractionHandle","delta","animationDuration","component","setNativeProps","setState","clearInteractionHandle","render","ref","propTypes","bool","number","renderPlaceholder","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { InteractionManager } from 'react-native'\nimport PropTypes from 'prop-types'\nimport { Path } from 'react-native-svg'\nimport * as interpolate from 'd3-interpolate-path'\n\nclass AnimatedPath extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = { d: props.d }\n    }\n\n    componentDidUpdate(props) {\n        const { d: newD, animate } = this.props\n        const { d: oldD } = props\n\n        this.newD = newD\n\n        if (newD === oldD) {\n            return\n        }\n\n        if (!animate || newD === null || oldD === null) {\n            return\n        }\n\n        this.newD = newD\n        this.interpolator = interpolate.interpolatePath(oldD, newD)\n\n        this._animate()\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.animation)\n        this._clearInteraction()\n    }\n\n    _animate(start) {\n        cancelAnimationFrame(this.animation)\n        this.animation = requestAnimationFrame((timestamp) => {\n            if (!start) {\n                this._clearInteraction()\n                this.handle = InteractionManager.createInteractionHandle()\n\n                start = timestamp\n            }\n\n            // Get the delta on how far long in our animation we are.\n            const delta = (timestamp - start) / this.props.animationDuration\n\n            // If we're above 1 then our animation should be complete.\n            if (delta > 1) {\n                // Just to be safe set our final value to the new graph path.\n                this.component.setNativeProps({ d: this.newD })\n                // Stop our animation loop.\n                this._clearInteraction()\n                return\n            }\n\n            const d = this.interpolator(delta)\n            this.component.setNativeProps({ d })\n            // console.log(this.interpolator)\n            // this.tween && console.log(this.tween.tween(delta))\n            // Tween the SVG path value according to what delta we're currently at.\n\n            // Update our state with the new tween value and then jump back into\n            // this loop.\n            this.setState(this.state, () => {\n                this._animate(start)\n            })\n        })\n    }\n\n    _clearInteraction() {\n        if (this.handle) {\n            InteractionManager.clearInteractionHandle(this.handle)\n            this.handle = null\n        }\n    }\n\n    render() {\n        return (\n            <Path\n                ref={(ref) => (this.component = ref)}\n                {...this.props}\n                d={this.props.animate ? this.state.d : this.props.d}\n            />\n        )\n    }\n}\n\nAnimatedPath.propTypes = {\n    animate: PropTypes.bool,\n    animationDuration: PropTypes.number,\n    renderPlaceholder: PropTypes.func,\n    ...Path.propTypes,\n}\n\nAnimatedPath.defaultProps = {\n    animate: false,\n    animationDuration: 300,\n    renderPlaceholder: () => null,\n}\n\nexport default AnimatedPath\n"]},"metadata":{},"sourceType":"module"}